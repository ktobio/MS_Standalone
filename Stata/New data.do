capture log closeclearset more offset scheme s1color*JEFF - run this section to create both2, which creates some other variables*use "data\\both"drop if max_rev==.drop _m*regressions*label var max_emp "Employees"label var max_rev "Revenue"g produc=(max_rev/1000000)/max_emplabel var produc "Productivity=Revenue/Emp (M)"drop if produc==.rename TotalTwoAttendeeMeetingCount TotTwoAttendeeMtgCountrename TotalThreeAttendeeMeetingCount TotThreeAttendeeMtgCount rename TotalFourAttendeeMeetingCount TotFourAttendeeMtgCount rename TotalFiveAttendeeMeetingCount TotFiveAttendeeMtgCountrename TotalSixAttendeeMeetingCount TotSixAttendeeMtgCount rename TotalSevenAttendeeMeetingCount TotSevenAttendeeMtgCount rename TotalEightAttendeeMeetingCount TotEightAttendeeMtgCount rename TotalNineAttendeeMeetingCount TotNineAttendeeMtgCount rename TotalTenPlusAttendeeMeetingCount TotTenPlusAttendeeMtgCount quietly tab country, gen(countrydum)foreach var in TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount ///TotFiveAttendeeMtgCount TotSixAttendeeMtgCount TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount {g s_`var'=(`var'/TotalMeetingCount)*100label var s_`var' "Share of `var'"}d countrydum*g firm_age=2017-min_yearlabel var firm_age "Firm Age (2017-founding year)"/******************NOTE - employee size quite small****************D&B Employee Count Summary. sum EMP, detail                          EMPCOUNT-------------------------------------------------------------      Percentiles      Smallest 1%            1              1 5%            1              110%            1              1       Obs             695,41225%            2              1       Sum of Wgt.     695,41250%            6                      Mean           141.2831                        Largest       Std. Dev.      4738.20575%           20         40600090%           60         406000       Variance       2.25e+0795%          150        2300000       Skewness       341.385699%         1400        2300000       Kurtosis       160312.1*/foreach var in TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount ///TotFiveAttendeeMtgCount TotSixAttendeeMtgCount TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount {replace s_`var'=0 if s_`var'==. & `var'==0}g db_size=""replace db_size="1. Tiny <=4" if max_emp<=4replace db_size="2. Very Small >4 & <=10" if max_emp>4 & max_emp<=10replace db_size="3. Small >10 & <=25" if max_emp>10 & max_emp<=25replace db_size="4. Not Small >25" if max_emp>25save "data\\both2", replace*/use "data\\both2"***REGRESSIONS AND FIGURES - FULL SAMPLE***quietly areg produc firm_age, absorb(country)local country_num=e(df_a)+1areg produc countrydum* firm_age, absorb(major) outreg2 using "output\\regression_full_$S_DATE", addnote("Uses dummies to control for line of business") excel replace drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')outreg2 using "output\\regression_no_outlier_$S_DATE", addnote("Uses dummies to control for line of business") excel replace drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')*full sample regressions*foreach var in msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSentPerUser_ext msgSentLowerQtileVal_ext msgSentUpperQtileVal_ext ///mtgHoursPerAt  mtgHoursLower mtgHoursUpper mtgsPerUser internal_mean_contacts external_mean_contacts ///s_TotTwoAttendeeMtgCount s_TotThreeAttendeeMtgCount s_TotFourAttendeeMtgCount s_TotFiveAttendeeMtgCount /// s_TotSixAttendeeMtgCount s_TotSevenAttendeeMtgCount s_TotEightAttendeeMtgCount s_TotNineAttendeeMtgCount s_TotTenPlusAttendeeMtgCount /// TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount /// TotSixAttendeeMtgCount TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount {*areg produc `var', absorb(major)*outreg2 using "output\\regression_full",  excel append label dec(4)*areg produc `var' countrydum*, absorb(major)*outreg2 using "output\\regression_full", excel append drop(countrydum* o.countrydum*)  label dec(4)quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="", absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age, absorb(major)outreg2 using "output\\regression_full_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')*controlling for # employees doesn't matter*areg produc `var' max_emp, absorb(major)*outreg2 using "output\\regression", addnote("Controlling for line of business") excel append}*drop outliers of the Productivity variable*egen ptile1=pctile(produc), p(1)egen ptile99=pctile(produc), p(99)drop if produc<=ptile1drop if produc>=ptile99drop ptile*/*dummy figure so I can open up a Word file to put all the real figures in*/scatter msgSentPerUser_int msgSentPerUser_intquietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") replace*Regressions and figures dropping the outliers of the IVs*foreach var in msgSentPerUser_int  msgSentUpperQtileVal_int msgSentPerUser_ext  msgSentUpperQtileVal_ext ///mtgHoursUpper mtgsPerUser internal_mean_contacts external_mean_contacts ///TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount TotSixAttendeeMtgCount {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & (`var'>ptile1 & `var'<ptile99), absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if (`var'>ptile1 & `var'<ptile99), absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')**Automate the margins calculations**egen max=max(`var') if `var'<=ptile99egen max2=max(max)replace max2=round(max2)egen min=min(`var') if `var'>=ptile1egen min2=min(min)replace min2=round(min2)g diff=max2-min2replace diff=(diff/10)g diff2=round(diff)local x=min2local y=max2 local z=diff2**Calculate margins**margins, at(`var'=(`x'(`z')`y'))**Plot margins**marginsplot, ytitle("Productivity, Millions")  plotopts(msymbol(none)) title("Productivity by Level of `var'") nociquietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") append*drop ptile* newdrop ptile* max* min* diff*}*Regressions and figures dropping the outliers of the IVs*foreach var in TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount mtgHoursLowerQtileVal msgSentLowerQtileVal_ext msgSentLowerQtileVal_int mtgHoursPerAttendee {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & (`var'>ptile1 & `var'<ptile99), absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if (`var'>ptile1 & `var'<ptile99), absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')**Automate the margins calculations**egen max=max(`var') if `var'<=ptile99egen max2=max(max)replace max2=round(max2, .01)egen min=min(`var') if `var'>=ptile1egen min2=min(min)replace min2=round(min2, .01)g diff=max2-min2replace diff=(diff/10)g diff2=round(diff, .01)local x=min2local y=max2 local z=diff2**Calculate margins**margins, at(`var'=(`x'(`z')`y'))**Plot margins**marginsplot, ytitle("Productivity, Millions")  plotopts(msymbol(none)) title("Productivity by Level of `var'") nociquietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") append*drop ptile* newdrop ptile* max* min* diff*}*We don't want to drop outliers of the share IVs*foreach var in s_TotTwoAttendeeMtgCount s_TotThreeAttendeeMtgCount s_TotFourAttendeeMtgCount s_TotFiveAttendeeMtgCount /// s_TotSixAttendeeMtgCount s_TotSevenAttendeeMtgCount s_TotEightAttendeeMtgCount s_TotNineAttendeeMtgCount s_TotTenPlusAttendeeMtgCount {quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" , absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age, absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')**Automate the margins calculations**egen max=max(`var') egen max2=max(max)replace max2=round(max2, .01)egen min=min(`var')egen min2=min(min)replace min2=round(min2, .01)g diff=max2-min2replace diff=(diff/10)g diff2=round(diff, .01)local x=min2local y=max2 local z=diff2**Calculate margins**margins, at(`var'=(`x'(`z')`y'))**Plot margins**marginsplot, ytitle("Productivity, Millions")  plotopts(msymbol(none)) title("Productivity by Level of `var'") nociquietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") append*drop ptile* newdrop  max* min* diff*}*/***REGRESSIONS BY SIZE***levelsof db_size, local(levels)quietly areg produc firm_age, absorb(country)local country_num=e(df_a)+1areg produc countrydum* firm_age, absorb(major) outreg2 using "output\\regression_full_bysize_$S_DATE", addnote("Uses dummies to control for line of business") excel replace drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')outreg2 using "output\\regression_no_outlier_bysize_$S_DATE", addnote("Uses dummies to control for line of business") excel replace drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')foreach var in msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSentPerUser_ext msgSentLowerQtileVal_ext msgSentUpperQtileVal_ext ///mtgHoursPerAt  mtgHoursLower mtgHoursUpper mtgsPerUser internal_mean_contacts external_mean_contacts ///s_TotTwoAttendeeMtgCount s_TotThreeAttendeeMtgCount s_TotFourAttendeeMtgCount s_TotFiveAttendeeMtgCount /// s_TotSixAttendeeMtgCount s_TotSevenAttendeeMtgCount s_TotEightAttendeeMtgCount s_TotNineAttendeeMtgCount s_TotTenPlusAttendeeMtgCount /// TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount /// TotSixAttendeeMtgCount TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount {quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="", absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age, absorb(major)outreg2 using "output\\regression_full_bysize_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')  ctitle("Productivity ALL")foreach l of local levels {quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & db_size=="`l'", absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if db_size=="`l'", absorb(major)outreg2 using "output\\regression_full_bysize_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')  ctitle("Productivity `l'")}}egen ptile1=pctile(produc), p(1)egen ptile99=pctile(produc), p(99)drop if produc<=ptile1drop if produc>=ptile99drop ptile*foreach var in msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSentPerUser_ext msgSentLowerQtileVal_ext msgSentUpperQtileVal_ext ///mtgHoursPerAt  mtgHoursLower mtgHoursUpper mtgsPerUser internal_mean_contacts external_mean_contacts ///s_TotTwoAttendeeMtgCount s_TotThreeAttendeeMtgCount s_TotFourAttendeeMtgCount s_TotFiveAttendeeMtgCount /// s_TotSixAttendeeMtgCount s_TotSevenAttendeeMtgCount s_TotEightAttendeeMtgCount s_TotNineAttendeeMtgCount s_TotTenPlusAttendeeMtgCount /// TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount /// TotSixAttendeeMtgCount TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & (`var'>ptile1 & `var'<ptile99), absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if (`var'>ptile1 & `var'<ptile99), absorb(major)outreg2 using "output\\regression_no_outlier_bysize_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')  ctitle("Productivity ALL")foreach l of local levels {quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & db_size=="`l'" & (`var'>ptile1 & `var'<ptile99), absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if db_size=="`l'" & (`var'>ptile1 & `var'<ptile99), absorb(major)outreg2 using "output\\regression_no_outlier_bysize_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')  ctitle("Productivity `l'")}drop ptile*}stop**JEFF - IGNORE EVERYTHING BELOW THIS***/**looking at the summary stats by original data*log using "logs\\sanity_check_$S_DATE.log", replace/*use "D:\MS - 9.26.17\cultureofwork_04-16.dta"foreach x in 05 06 07 08 09 {compressappend using "D:\MS - 9.26.17\cultureofwork_`x'-16.dta"drop OmsTenantId CountryName WeekBeginDateIddrop SignupCoun }codebook _all*d, short*sum, detailclear/*use "D:\MS - 9.26.17\cultureofwork_ 2 Oct 2017.dta"drop counterd, shortsum, detailclear*/*/use "D:\MS - 9.26.17\messagenetworksize_04-16"drop OmsTenantId WeekBeginDateId CountryNameforeach x in 05 06 07 08 09 {append using "D:\MS - 9.26.17\messagenetworksize_`x'-16"drop OmsTenantId WeekBeginDateId CountryName}*d, short*sum, detailcodebook _allclearstopuse "D:\MS - 9.26.17\messagenetworksize_ 4 Oct 2017"drop OmsTenantId CountryName counterd, shortsum, detailclearstop*This code takes the raw data and creates the both.dta dataset"*CULTURE OF WORK*/*foreach x in 04 05 06 07 08 09 {insheet using "D:\MS - 9.26.17\cultureofwork_`x'-16.csv", names casesave "D:\MS - 9.26.17\cultureofwork_`x'-16.dta", replaceclear}*//*foreach x in 04 05 06 07 08 09 {use "D:\MS - 9.26.17\cultureofwork_`x'-16.dta"g counter=1collapse (sum) counter (mean) msgSenders_int msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSenders_ext msgSentPerUser_ext msgSentLowerQtileVal_ext ///msgSentUpperQtileVal_ext mtgAttendees mtgHoursPerAttendee mtgHoursLowerQtileVal mtgHoursUpperQtileVal mtgsPerUser mtgsPerTenant TotalMeetingAttendanceCount ///TotalMeetingCount TotalTwoAttendeeMeetingCount TotalThreeAttendeeMeetingCount TotalFourAttendeeMeetingCount TotalFiveAttendeeMeetingCount TotalSixAttendeeMeetingCount ///TotalSevenAttendeeMeetingCount TotalEightAttendeeMeetingCount TotalNineAttendeeMeetingCount TotalTenPlusAttendeeMeetingCount, by (OmsTenantId CountryName)save "D:\MS - 9.26.17\cultureofwork_`x'-16_collapse.dta", replaceclear}use "D:\MS - 9.26.17\cultureofwork_04-16_collapse.dta"append using "D:\MS - 9.26.17\cultureofwork_05-16_collapse.dta"foreach var in msgSenders_int msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSenders_ext msgSentPerUser_ext msgSentLowerQtileVal_ext ///msgSentUpperQtileVal_ext mtgAttendees mtgHoursPerAttendee mtgHoursLowerQtileVal mtgHoursUpperQtileVal mtgsPerUser mtgsPerTenant TotalMeetingAttendanceCount ///TotalMeetingCount TotalTwoAttendeeMeetingCount TotalThreeAttendeeMeetingCount TotalFourAttendeeMeetingCount TotalFiveAttendeeMeetingCount TotalSixAttendeeMeetingCount ///TotalSevenAttendeeMeetingCount TotalEightAttendeeMeetingCount TotalNineAttendeeMeetingCount TotalTenPlusAttendeeMeetingCount counter {replace `var'=`var'*counter}collapse (sum) msgSenders_int msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSenders_ext msgSentPerUser_ext msgSentLowerQtileVal_ext ///msgSentUpperQtileVal_ext mtgAttendees mtgHoursPerAttendee mtgHoursLowerQtileVal mtgHoursUpperQtileVal mtgsPerUser mtgsPerTenant TotalMeetingAttendanceCount ///TotalMeetingCount TotalTwoAttendeeMeetingCount TotalThreeAttendeeMeetingCount TotalFourAttendeeMeetingCount TotalFiveAttendeeMeetingCount TotalSixAttendeeMeetingCount ///TotalSevenAttendeeMeetingCount TotalEightAttendeeMeetingCount TotalNineAttendeeMeetingCount TotalTenPlusAttendeeMeetingCount counter, by ( OmsTenantId CountryName )foreach var in msgSenders_int msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSenders_ext msgSentPerUser_ext msgSentLowerQtileVal_ext ///msgSentUpperQtileVal_ext mtgAttendees mtgHoursPerAttendee mtgHoursLowerQtileVal mtgHoursUpperQtileVal mtgsPerUser mtgsPerTenant TotalMeetingAttendanceCount ///TotalMeetingCount TotalTwoAttendeeMeetingCount TotalThreeAttendeeMeetingCount TotalFourAttendeeMeetingCount TotalFiveAttendeeMeetingCount TotalSixAttendeeMeetingCount ///TotalSevenAttendeeMeetingCount TotalEightAttendeeMeetingCount TotalNineAttendeeMeetingCount TotalTenPlusAttendeeMeetingCoun counter {replace `var'=`var'/counter}foreach x in 06 07 08 09  {append using "D:\MS - 9.26.17\cultureofwork_`x'-16_collapse.dta"foreach var in msgSenders_int msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSenders_ext msgSentPerUser_ext msgSentLowerQtileVal_ext ///msgSentUpperQtileVal_ext mtgAttendees mtgHoursPerAttendee mtgHoursLowerQtileVal mtgHoursUpperQtileVal mtgsPerUser mtgsPerTenant TotalMeetingAttendanceCount ///TotalMeetingCount TotalTwoAttendeeMeetingCount TotalThreeAttendeeMeetingCount TotalFourAttendeeMeetingCount TotalFiveAttendeeMeetingCount TotalSixAttendeeMeetingCount ///TotalSevenAttendeeMeetingCount TotalEightAttendeeMeetingCount TotalNineAttendeeMeetingCount TotalTenPlusAttendeeMeetingCoun counter {replace `var'=`var'*counter}collapse (sum) msgSenders_int msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSenders_ext msgSentPerUser_ext msgSentLowerQtileVal_ext ///msgSentUpperQtileVal_ext mtgAttendees mtgHoursPerAttendee mtgHoursLowerQtileVal mtgHoursUpperQtileVal mtgsPerUser mtgsPerTenant TotalMeetingAttendanceCount ///TotalMeetingCount TotalTwoAttendeeMeetingCount TotalThreeAttendeeMeetingCount TotalFourAttendeeMeetingCount TotalFiveAttendeeMeetingCount TotalSixAttendeeMeetingCount ///TotalSevenAttendeeMeetingCount TotalEightAttendeeMeetingCount TotalNineAttendeeMeetingCount TotalTenPlusAttendeeMeetingCount counter, by ( OmsTenantId CountryName )foreach var in msgSenders_int msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSenders_ext msgSentPerUser_ext msgSentLowerQtileVal_ext ///msgSentUpperQtileVal_ext mtgAttendees mtgHoursPerAttendee mtgHoursLowerQtileVal mtgHoursUpperQtileVal mtgsPerUser mtgsPerTenant TotalMeetingAttendanceCount ///TotalMeetingCount TotalTwoAttendeeMeetingCount TotalThreeAttendeeMeetingCount TotalFourAttendeeMeetingCount TotalFiveAttendeeMeetingCount TotalSixAttendeeMeetingCount ///TotalSevenAttendeeMeetingCount TotalEightAttendeeMeetingCount TotalNineAttendeeMeetingCount TotalTenPlusAttendeeMeetingCoun counter {replace `var'=`var'/counter}}label var CountryName "The name of the country the users in this row are located in"label var msgSenders_ext "# of users who have sent msgs from internal to external"label var msgSenders_int "# of users who have sent msgs from internal to internal"label var msgSentLowerQtileVal_ext "avg # of msgs sent to external in the lower quartile"label var msgSentLowerQtileVal_int "avg # of msgs sent to internal in the lower quartile"label var msgSentPerUser_ext "avg # of msgs sent external per user"label var msgSentPerUser_int "avg # of msgs sent internal per user"label var msgSentUpperQtileVal_ext "avg # of msgs sent to external in the upper quartile"label var msgSentUpperQtileVal_int "avg # of msgs sent to internal in the upper quartile"label var mtgAttendees "# of users who have mtgs"label var mtgHoursLowerQtileVal "avg # of mtg hours"label var mtgHoursPerAttendee "avg mtg hours per user"label var mtgHoursUpperQtileVal "avg mtg hours per user in the upper quartile"label var mtgsPerTenant "count of mtgs for the week for the ten-wk-cntry"label var mtgsPerUser "avg # of mtgs per user"label var OmsTenantId "tenant Id"*label var SignupCountry "Country registered as the ‘signup location’ for O365 for the tenant"label var TotalTwoAttend "# of mtgs for the ten-wk-cntry when attendee count is 2"label var TotalThreeAtten "# of mtgs for the ten-wk-cntry when attendee count is 3"label var TotalFourAttend "# of mtgs for the ten-wk-cntry when attendee count is 4"label var TotalFiveAtten "# of mtgs for the ten-wk-cntry when attendee count is 5"label var TotalSixAtten "# of mtgs for the ten-wk-cntry when attendee count is 6"label var TotalSevenAtten "# of mtgs for the ten-wk-cntry when attendee count is 7"label var TotalEightAtten "# of mtgs for the ten-wk-cntry when attendee count is 8"label var TotalNineAtte "# of mtgs for the ten-wk-cntry when attendee count is 9"label var TotalTen "# of mtgs for the ten-wk-cntry when attendee count is 10"log using "logs\\cultureofwork_$S_DATE.log", replacecodebook _allsave "D:\MS - 9.26.17\cultureofwork_$S_DATE.dta", replace*MESSAGE NETWORK SIZE STUFF**NOT USING month 10, so the time period is the same**log using "logs\messagenetworksize_$S_DATE", replaceforeach x in 04 05 06 07 08 09 {*foreach x in 08 09 10 {insheet using "D:\MS - 9.26.17\messagenetworksize_`x'-16.csv", names caseforeach var in internal_population internal_mean_contacts internal_stdev_contacts external_population external_mean_contacts external_stdev_contacts {replace `var'="" if `var'=="#NUL#"destring `var', replace}save "D:\MS - 9.26.17\messagenetworksize_`x'-16", replaceclear}foreach x in 04 05 06 07 08 09{use "D:\MS - 9.26.17\messagenetworksize_`x'-16.dta"g counter=1collapse (sum) counter (mean) total_population internal_population internal_mean_contacts internal_stdev_contacts external_population external_mean_contacts external_stdev_contacts, by ( OmsTenantId CountryName)save "D:\MS - 9.26.17\messagenetworksize_`x'-16_collapse.dta", replaceclear}use "D:\MS - 9.26.17\messagenetworksize_04-16_collapse.dta"append using "D:\MS - 9.26.17\messagenetworksize_05-16_collapse.dta"foreach var in total_population internal_population internal_mean_contacts internal_stdev_contacts external_population external_mean_contacts external_stdev_contact {replace `var'=`var'*counter}collapse (sum) counter total_population internal_population internal_mean_contacts internal_stdev_contacts external_population external_mean_contacts external_stdev_contact, by ( OmsTenantId CountryName)foreach var in total_population internal_population internal_mean_contacts internal_stdev_contacts external_population external_mean_contacts external_stdev_contact {replace `var'=`var'/counter}foreach x in 06 07 08 09 {append using "D:\MS - 9.26.17\messagenetworksize_`x'-16_collapse.dta"foreach var in total_population internal_population internal_mean_contacts internal_stdev_contacts external_population external_mean_contacts external_stdev_contact {replace `var'=`var'*counter}collapse (sum) counter total_population internal_population internal_mean_contacts internal_stdev_contacts external_population external_mean_contacts external_stdev_contact, by ( OmsTenantId CountryName)foreach var in total_population internal_population internal_mean_contacts internal_stdev_contacts external_population external_mean_contacts external_stdev_contact {replace `var'=`var'/counter}}/*User A gets a connection if they contact User B via sent email where the email has 5 or fewer recipients. This will be an internal contact if User B has the same OMSTenantId as User A, it is considered an external connection otherwise.*/label var CountryName "country the user is located in"label var external_population "# of people with any external contacts from this ten-wk-cntry"label var external_mean_contacts "avg # of  external contacts people have from this ten-wk-cntry" label var external_stdev_contacts "standard deviation of external contacts people have from this ten-wk-cntry" label var internal_population "# of people with any internal contacts from this ten-wk-cntry" label var internal_mean_contacts "avg # of internal contacts people have from this ten-wk-cntry" label var internal_stdev_contacts "standard deviation of internal contacts people have from this ten-wk-cntry" label var OmsTenantId "tenant id"label var total_population "# of distinct users that have any contacts from this tenant-week-country"use "D:\MS - 9.26.17\messagenetworksize_ 3 Oct 2017.dta"*log using "logs\\messagenetworksize_$S_DATE.log", replacereplace Country=proper(Country)*codebook _allsave "D:\MS - 9.26.17\messagenetworksize_$S_DATE.dta", replaceclearuse "D:\MS - 9.26.17\cultureofwork_ 2 Oct 2017.dta"replace Country=proper(Country)joinby Oms CountryName using "D:\MS - 9.26.17\messagenetworksize_ 4 Oct 2017", unmatched(both)save "D:\MS - 9.26.17\combined_data_$S_DATE", replaceclear*use "D:\MS - 9.26.17\combined_data_$S_DATE"*//* g senders=(msgSenders_int  + msgSenders_ext)/2 label var senders "Avg # senders (int and ext)"*codebook _allscatter msgSenders_int msgSenders_intgraph export "output\\tmp.png", replacepng2rtf using "output\\culture_of_work_$S_DATE.doc", g("output\\tmp.png") replaceforeach var in senders msgSenders_int	msgSentPerUser_int	msgSentLowerQtileVal_int	msgSentUpperQtileVal_int	msgSenders_ext	msgSentPerUser_ext	msgSentLowerQtileVal_ext	///msgSentUpperQtileVal_ext	mtgAttendees	mtgHoursPerAttendee	mtgHoursLowerQtileVal	mtgHoursUpperQtileVal	mtgsPerUser	mtgsPerTenant	///TotalMeetingAttendanceCount	TotalMeetingCount	TotalTwoAttendeeMeetingCount	TotalThreeAttendeeMeetingCount	TotalFourAttendeeMeetingCount	///TotalFiveAttendeeMeetingCount	TotalSixAttendeeMeetingCount	TotalSevenAttendeeMeetingCount	TotalEightAttendeeMeetingCount	TotalNineAttendeeMeetingCount	TotalTenPlusAttendeeMeetingCount {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly histogram `var' if `var'>=ptile1 & `var'<=ptile99, fraction title("All Tenants")graph export "output\\tmp.png", replacepng2rtf using "output\\culture_of_work_$S_DATE.doc", g("output\\tmp.png") appenddrop ptile*}drop if senders<=1foreach var in senders msgSenders_int	msgSentPerUser_int	msgSentLowerQtileVal_int	msgSentUpperQtileVal_int	msgSenders_ext	msgSentPerUser_ext	msgSentLowerQtileVal_ext	///msgSentUpperQtileVal_ext	mtgAttendees	mtgHoursPerAttendee	mtgHoursLowerQtileVal	mtgHoursUpperQtileVal	mtgsPerUser	mtgsPerTenant	///TotalMeetingAttendanceCount	TotalMeetingCount	TotalTwoAttendeeMeetingCount	TotalThreeAttendeeMeetingCount	TotalFourAttendeeMeetingCount	///TotalFiveAttendeeMeetingCount	TotalSixAttendeeMeetingCount	TotalSevenAttendeeMeetingCount	TotalEightAttendeeMeetingCount	TotalNineAttendeeMeetingCount	TotalTenPlusAttendeeMeetingCount {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly histogram `var' if `var'>=ptile1 & `var'<=ptile99, fraction title("Dropping 1-Person Tenants")graph export "output\\tmp.png", replacepng2rtf using "output\\culture_of_work_$S_DATE.doc", g("output\\tmp.png") appenddrop ptile*}*quietly histogram `var' if `var'>=ptile1 & `var'<=ptile99, by(Country) fraction*graph export "output\\tmp.png", replace*png2rtf using "output\\culture_of_work_$S_DATE.doc", g("output\\tmp.png") appendstop*//*log using "logs\metadata_$S_DATE", replaceinsheet using "D:\MS - 9.26.17\tenantmetadata_09.25.csv", names caseforeach var in yearstarted growthpercent {replace `var'="" if `var'=="NULL"destring `var', replace}foreach var in growthsign growthtype {replace `var'="" if `var'=="NULL"}drop if oms==""save "D:\MS - 9.26.17\tenant_metadata", replace/*note status indicator0=Single Location. A business in which all operations are conducted at one physical location. It does not have branches or divisions reporting to it. It may be a parent company or subsidiary.1=Headquarters. A business having at least one branch or division reporting to it.2=Branch. A business that reports to a headquarters. It is usually the same type of business and carriers the same business name as its headquarters.4=Division. A business that reports to a headquarters, but is usually in a different line of business and carriers a different business name.note subsidary indicatorIndicates if the business is a subsidiary. A subsidiary is a corporation with more than 50% of its stock owned by another business.0=Not a Subsidiary3=A Subsidiary*//*log using "logs\metadata_notes_$S_DATE", replaceuse "D:\MS - 9.26.17\tenant_metadata"drop growth*duplicates droptab subsidiaryindicator, missingtab statuscode, missingbysort statuscode: tab subsidiaryindicator, missingbysort subsidiaryindicator: tab statuscode, missing/*http://www.zerohedge.com/news/2017-05-30/which-companies-have-highest-revenue-employee*/g revperemp=revenue/numbergsort -revperlist omstenantid lineofbusiness city country numberofemployees_here statuscode subsidiaryindicator revenue yearstarted revperemp if _n<=50sort revperlist omstenantid lineofbusiness city country numberofemployees_here statuscode subsidiaryindicator revenue yearstarted revperemp if _n<=50/*For only single location areas*/keep if status==0 & subsid==0gsort -revperlist omstenantid lineofbusiness city country numberofemployees_here statuscode subsidiaryindicator revenue yearstarted revperemp if _n<=50sort revperlist omstenantid lineofbusiness city country numberofemployees_here statuscode subsidiaryindicator revenue yearstarted revperemp if _n<=50clearuse "D:\MS - 9.26.17\tenant_metadata"drop growth*duplicates dropkeep omsg counter=1collapse (sum) counter, by (oms)*Number of branches/divisions/locations/subsidiaries per Tenant ID*sum counter, detailclearuse "D:\MS - 9.26.17\tenant_metadata"drop growth*duplicates dropg counter=1bysort oms: egen sum=sum(counter)keep if sum>=1000bysort sum oms: tab lineof countryclear/*Something to check - sales - is it all rolled up at HQ?*/use "D:\MS - 9.26.17\tenant_metadata"drop growth*duplicates dropcollapse (sum) revenue number, by (oms country line)/* take the business line with the most revenue*/gsort oms country -revenueby oms country: g counter=_ng maxbusiness=line if counter==1bysort oms country: replace max=max[_n-1] if max==""count if max==""collapse (sum) revenue number, by (oms country max)g profitperemp=revenue/numbergsort -profitsave "D:\MS - 9.26.17\tenant_metadata_test", replaceclearuse "D:\MS - 9.26.17\tenant_metadata"drop growth*replace city=proper(city)replace country=proper(country)drop postal cityduplicates dropbysort oms country: egen max_emp=max(number)bysort oms country: egen max_rev=max(revenue)*choose the industry w most employees for a given location*g majorbusiness=""replace majorbusiness=lineofbusiness if max_rev==revenuedrop number revenuebysort oms country: egen min_year=min(year)drop yeardrop line sub* statusduplicates dropdrop if major==""duplicates dropreplace country="United Kingdom" if country=="England"replace country="United Kingdom" if country=="Northern Ireland"replace country="United Kingdom" if country=="Scotland"replace country="United Kingdom" if country=="Wales"save "D:\MS - 9.26.17\tenant_metadata_clear", replace*/use "D:\MS - 9.26.17\tenant_metadata_clear"replace country="United Kingdom" if country=="England"replace country="United Kingdom" if country=="Northern Ireland"replace country="United Kingdom" if country=="Scotland"replace country="United Kingdom" if country=="Wales"replace country="South Korea" if country=="Korea Rep Of"tab countrysave "D:\MS - 9.26.17\tenant_metadata_clear", replaceclearuse "D:\MS - 9.26.17\combined_data_$S_DATE"rename Oms omstenantidrename Country countryreplace country="usa" if country=="united states"replace country=proper(country)replace country="Usa" if country=="United States"replace country="South Korea" if country=="Korea Rep Of"tab countrydrop _mjoinby oms country using "D:\MS - 9.26.17\tenant_metadata_clear", unmatched(both)save "D:\MS - 9.26.17\both", replaceuse "D:\MS - 9.26.17\tenant_metadata_clear"log using "D:\MS - 9.26.17\tenant_metadata_codebook_$S_DATE.log", replacecodebook _allclearlog close*/*log using "D:\MS - 9.26.17\both_$S_DATE.log", replaceuse "D:\MS - 9.26.17\both"label var max_emp "Employees"label var max_rev "Revenue"g produc=(max_rev/1000000)/max_emplabel var produc "Productivity=Revenue/Emp (M)"/*gsort -produclist country major max_emp produc if _n<=15gsort produclist country major max_emp produc if _n<=15*//*scatter msgSenders_int msgSenders_intgraph export "output\\tmp.png", height(400) replacepng2rtf using "output\\newdata_$S_DATE.doc",  g("output\\tmp.png") replaceforeach var in max_emp prod min_year msgSenders_int	msgSentPerUser_int	msgSentLowerQtileVal_int	msgSentUpperQtileVal_int	msgSenders_ext	msgSentPerUser_ext	msgSentLowerQtileVal_ext	///msgSentUpperQtileVal_ext	mtgAttendees	mtgHoursPerAttendee	mtgHoursLowerQtileVal	mtgHoursUpperQtileVal	mtgsPerUser	mtgsPerTenant	///TotalMeetingAttendanceCount	TotalMeetingCount	TotalTwoAttendeeMeetingCount	TotalThreeAttendeeMeetingCount	TotalFourAttendeeMeetingCount	///TotalFiveAttendeeMeetingCount	TotalSixAttendeeMeetingCount	TotalSevenAttendeeMeetingCount	TotalEightAttendeeMeetingCount	TotalNineAttendeeMeetingCount	TotalTenPlusAttendeeMeetingCount {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly histogram `var' if `var'>=ptile1 & `var'<=ptile99,   fraction title("All Tenants")quietly graph export "output\\tmp.png", height(400) replacepng2rtf using "output\\newdata_$S_DATE.doc", g("output\\tmp.png") appendquietly histogram `var' if `var'>=ptile1 & `var'<=ptile99 & max_emp>2,   fraction title("Dropping 1-Person and 2-Person Tenants")quietly graph export "output\\tmp.png", height(400) replacepng2rtf using "output\\newdata_$S_DATE.doc", g("output\\tmp.png") appenddrop ptile*}*//*log using "logs\\corr.log", replacepwcorr max_emp prod msgSenders_int	msgSentPerUser_int	msgSentLowerQtileVal_int	msgSentUpperQtileVal_int	msgSenders_ext	msgSentPerUser_ext	msgSentLowerQtileVal_ext	///msgSentUpperQtileVal_ext	mtgAttendees	mtgHoursPerAttendee	mtgHoursLowerQtileVal	mtgHoursUpperQtileVal	mtgsPerUser	mtgsPerTenant	///TotalMeetingAttendanceCount	TotalMeetingCount	TotalTwoAttendeeMeetingCount	TotalThreeAttendeeMeetingCount	TotalFourAttendeeMeetingCount	///TotalFiveAttendeeMeetingCount	TotalSixAttendeeMeetingCount	TotalSevenAttendeeMeetingCount	TotalEightAttendeeMeetingCount	TotalNineAttendeeMeetingCount	TotalTenPlusAttendeeMeetingCount, siglog close*/scatter max_emp max_empgraph export "output\\tmp.png", height(400) replacepng2rtf using "output\\bycountry_$S_DATE.doc",  g("output\\tmp.png") replacerename TotalTenPlusAttendeeMeetingCount Tot10PlusAttendeeMtgCntforeach var in max_emp produc min_year msgSenders_int	msgSentPerUser_int	msgSentLowerQtileVal_int	msgSentUpperQtileVal_int	msgSenders_ext	msgSentPerUser_ext	msgSentLowerQtileVal_ext	///msgSentUpperQtileVal_ext	mtgAttendees	mtgHoursPerAttendee	mtgHoursLowerQtileVal	mtgHoursUpperQtileVal	mtgsPerUser	mtgsPerTenant	///TotalMeetingAttendanceCount	TotalMeetingCount	TotalTwoAttendeeMeetingCount	TotalThreeAttendeeMeetingCount	TotalFourAttendeeMeetingCount	///TotalFiveAttendeeMeetingCount	TotalSixAttendeeMeetingCount	TotalSevenAttendeeMeetingCount	TotalEightAttendeeMeetingCount	TotalNineAttendeeMeetingCount	Tot10PlusAttendeeMtgCnt {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)bysort country: egen `var'2=mean(`var') if `var'>=ptile1 & `var'<=ptile99gsort -`var'2g order=_nquietly graph bar `var'2 if `var'>=ptile1 & `var'<=ptile99, over(country, sort(order) label(angle(45) labsize(vsmall))) ytitle("`var'") xsize(8) b1title("Countries" "no outliers") nofillquietly graph save "output\\tmp", replacequietly graph export "output\\tmp.png", replacepng2rtf using "output\\bycountry_$S_DATE.doc", g("output\\tmp.png") appenddrop ptile* order}stop/*drop if max_emp<=1foreach var in max_emp prod min_year msgSenders_int	msgSentPerUser_int	msgSentLowerQtileVal_int	msgSentUpperQtileVal_int	msgSenders_ext	msgSentPerUser_ext	msgSentLowerQtileVal_ext	///msgSentUpperQtileVal_ext	mtgAttendees	mtgHoursPerAttendee	mtgHoursLowerQtileVal	mtgHoursUpperQtileVal	mtgsPerUser	mtgsPerTenant	///TotalMeetingAttendanceCount	TotalMeetingCount	TotalTwoAttendeeMeetingCount	TotalThreeAttendeeMeetingCount	TotalFourAttendeeMeetingCount	///TotalFiveAttendeeMeetingCount	TotalSixAttendeeMeetingCount	TotalSevenAttendeeMeetingCount	TotalEightAttendeeMeetingCount	TotalNineAttendeeMeetingCount	TotalTenPlusAttendeeMeetingCount {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly histogram `var' if `var'>=ptile1 & `var'<=ptile99, fraction title("Dropping 1-Person Tenants")quietly graph export "output\\tmp.png", replacepng2rtf using "output\\culture_of_work_$S_DATE.doc", g("output\\tmp.png") appenddrop ptile*}*/ENDstopduplicates drop/*for now, do max revenue only. Add together?*/bysort Oms: egen maxrevenue=max(REV)/*i decided summing was better*/bysort Oms: egen sumrevenue=sum(REV)/*For now, do ealiest year founded*/bysort Oms: egen earlyyear=min(YEAR)/*For now, do max of employees. Sum?*/bysort Oms: egen maxemploy=max(EMP)/*i decided summing was better*/bysort Oms: egen sumemploy=sum(EMP)drop REVENUEdrop YEARdrop EMP/*replace COUNTRY="United Kingdom" if COUNTRY=="ENGLAND"replace COUNTRY="United Kingdom" if COUNTRY=="NORTHERN IRELAND"replace COUNTRY="United Kingdom" if COUNTRY=="SCOTLAND"replace COUNTRY="United Kingdom" if COUNTRY=="WALES"replace COUNTRY="United States" if COUNTRY=="USA"replace COUNTRY=proper(COUNTRY)*/*bysort Oms COUNTRY LINE: egen minyear=min(YEAR)duplicates drop*bysort Oms COUNTRY YEAR: g counter=_nbysort Oms : g counter=_nsum counter, detailbysort Oms: egen max=max(counter)sum max, detaildrop LINEdrop counterduplicates dropbysort Oms : g counter=_nsum counter, detaildrop maxreshape wide COUN, i(Oms max* sum*) j(counter)save "data\tenant_metadata2", replaceclearuse "data\tenant_metadata2"joinby Oms using "data\MS_collapse_by_tenant_merge_$S_DATE", unmatched(both)tab Country if _m==1tab Country if _m==2tab Country if _m==3/* calculating the countries NOT in D&B"keep Country _mbysort Country: g counter=_nbysort Country: egen max=max(counter)keep if max==1counttab Country*/keep if _m==3save "data\meta_MS_merge_$S_DATE", replaceclear*THIS IS FULL DATASET*use "data\tenant_metadata"tab COUNTRYreplace COUNTRY=proper(COUNTRY)replace REVENUE=REVENUE/1000000label var REVENUE  "Revenue, in $M"g productivity= REVENUE/ EMPCOUNTsum productivity, detailhistogram productivity, percent b1title("Productivity (Revenue/Employees in Mill)")graph save "output\\prod_metadata", replacegraph export "output\\prod_metadata.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_metadata.png") replacesum REVENUE, detailsum EMPCOUNT, detailsum productivity, detailegen ptile1_productivity=pctile(productivity), p(1)egen ptile99_productivity=pctile(productivity), p(99)egen ptile999_productivity=pctile(productivity), p(99.9)histogram productivity if productivity>=ptile1_productivity & productivity<=ptile99_productivity, percent b1title("Prod (Rev/Emp) in Mill" "No outliers")graph save "output\\prod_metadata_s", replacegraph export "output\\prod_metadata_s.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_metadata_s.png") appendbysort COUNTRY: egen productivity2=mean(productivity) if EMPCOUNT<=2gsort -productivity2g order=_ngraph bar productivity2 if EMPCOUNT<=2, over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp) in Mill") xsize(8) b1title("Countries" "# Employees<=2") nofillgraph save "output\\prod_2", replacegraph export "output\\prod_2.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_2.png") appenddrop productivity2 order bysort COUNTRY: egen productivity2=mean(productivity) if EMPCOUNT>2 & EMPCOUNT<=6gsort -productivity2g order=_ngraph bar productivity2 if EMPCOUNT>2 & EMPCOUNT<=6, over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp) in Mill") xsize(8) b1title("Countries" "# Employees 2-6") nofillgraph save "output\\prod_2_6", replacegraph export "output\\prod_2_6.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_2_6.png") appenddrop productivity2 order bysort COUNTRY: egen productivity2=mean(productivity) if EMPCOUNT>6 & EMPCOUNT<=20gsort -productivity2g order=_ngraph bar productivity2 if EMPCOUNT>6 & EMPCOUNT<=20, over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp) in Mill") xsize(8) b1title("Countries" "# Employees 6-20") nofillgraph save "output\\prod_6_20", replacegraph export "output\\prod_6_20.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_6_20.png") appenddrop productivity2 order bysort COUNTRY: egen productivity2=mean(productivity) if EMPCOUNT>20 & EMPCOUNT<=100gsort -productivity2g order=_ngraph bar productivity2 if EMPCOUNT>20 & EMPCOUNT<=100, over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp) in Mill") xsize(8) b1title("Countries" "# Employees 20-100") nofillgraph save "output\\prod_20_100", replacegraph export "output\\prod_20_100.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_20_100.png") appenddrop productivity2 order bysort COUNTRY: egen productivity2=mean(productivity) if EMPCOUNT>100 gsort -productivity2g order=_ngraph bar productivity2 if EMPCOUNT>100, over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp) in Mill") xsize(8) b1title("Countries" "# Employees 100+") nofillgraph save "output\\prod_100", replacegraph export "output\\prod_100.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_100.png") appenddrop productivity2 order bysort COUNTRY: egen productivity2=mean(productivity)gsort -productivity2g order=_ngraph bar productivity2 , over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp), in Mill") xsize(8) b1title("Countries") nofillgraph save "output\\prod_big", replacegraph export "output\\prod_big.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_big.png") appenddrop productivity2 order drop if productivity<=ptile1_productivity drop if productivity>=ptile99_productivitybysort COUNTRY: egen productivity2=mean(productivity)gsort -productivity2g order=_ngraph bar productivity2 , over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp), in Mill") xsize(8) b1title("Countries" "No Outliers") nofillgraph save "output\\prod_s", replacegraph export "output\\prod_s.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_s.png") appendclear*THIS IS ONLY MERGED*This country uses the country that is in the MS datause "data\meta_MS_merge_$S_DATE/*g match=0forvalues x=1/14 {replace match=1 if COUNTRY`x'==Country}/*if match=0, there countries don't match with D&B*/log using "logs/tenants_$S_DATE", replace*bysort TenantSize: sum maxemp, detail/*This is weird*/bysort TenantSize: sum sumemp, detail*/replace maxrevenue=maxrevenue/1000000label var maxrevenue "Maximum revenue - in Millions"replace sumrevenue=sumrevenue/1000000label var sumrevenue "Sum of revenue - in Millions"g productivity=sumrevenue/sumempsum maxrevenue, detailsum sumrevenue, detailsum sumemp, detailsum productivity, detailbysort Country: egen productivity2=mean(productivity)gsort -productivity2g order=_ngraph bar productivity2, over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle("Productivity (Revenue/Employee)in mill") xsize(8) b1title("Countries") nofillgraph save "output\\prod", replacegraph export "output\\prod.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod.png") appendbysort Country: g counter=_ngsort -productivity2list Country productivity2 if counter==1drop counterforeach var in maxrevenue sumemp productivity msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize {egen ptile1_`var'=pctile(`var'), p(1)egen ptile99_`var'=pctile(`var'), p(99)egen ptile999_`var'=pctile(`var'), p(99.9)}drop if productivity<=ptile1_productivitydrop if productivity>=ptile99_productivitydrop productivity2drop orderbysort Country: egen productivity2=mean(productivity)gsort -productivity2g order=_ngraph bar productivity2, over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle("Productivity (Revenue/Employee)in mill") xsize(8) b1title("Countries" "no outliers") nofillgraph save "output\\prod_small", replacegraph export "output\\prod_small.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_small.png") appendbysort Country: g counter=_ngsort -productivity2list Country productivity2 if counter==1drop countersave "data\meta_MS_merge_2_$S_DATE", replacecollapse (mean) maxrevenue sumemp msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize  productivity ptile*, by (Country)foreach var in maxrevenue sumemp msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize  {pwcorr productivity `var' if `var'>= ptile1_`var' & `var'<= ptile99_`var', sigscatter productivity `var' if `var'>= ptile1_`var' & `var'<= ptile99_`var', ||  lfit productivity `var' if `var'>= ptile1_`var' & `var'<= ptile99_`var'*graph save "output\\prod_`var'", replace*graph export "output\\prod_`var'.png", replace*png2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_`var'.png") append}dotplot productivityclearuse "data\meta_MS_merge_2_$S_DATE"*do something by size*stopforeach var in idv_reverse lto pdi {gsort -`var'g order=_nlocal mytitle : variable label `var'*graph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle(`mytitle') xsize(8) b1title("Countries") nofillegen mean=mean(`var')local mean=meangraph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle(`mytitle') xsize(8)  nofill yline(`mean')  bar(1,color(blue))drop order meangraph save "output\\`var'", replacegraph export "output\\`var'.png", replace}stopstopdrop if _m==1drop _mstopstopdrop GRWPCT GRWSIGN GRWTYPE POSTALCD POSTALCD CITY COUNTRYjoinby Oms using "data\MS_collapse_by_tenant_merge_$S_DATE", unmatched(both)g match=0forvalues x=1/14 {replace match=1 if Country==COUNTRY`x'}insheet using "data\cultureofwork_02-16.csv", names caseforeach var in msgSenders_int msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSenders_ext msgSentPerUser_ext msgSentLowerQtileVal_ext msgSentUpperQtileVal_ext mtgAttendees mtgHoursPerAttendee mtgHoursLowerQtileVal mtgHoursUpperQtileVal mtgsPerUser mtgsPerTenant TotalMeetingAttendanceCount TotalMeetingCount TotalTwoAttendeeMeetingCount TotalThreeAttendeeMeetingCount TotalFourAttendeeMeetingCount TotalFiveAttendeeMeetingCount TotalSixAttendeeMeetingCount TotalSevenAttendeeMeetingCount TotalEightAttendeeMeetingCount TotalNineAttendeeMeetingCount TotalTenPlusAttendeeMeetingCount {replace `var'="" if `var'=="#NUL#"destring `var', replace}save "data\cultureofwork_02-16", replacestopinsheet using "data\messagenetworksize_10-16.csv", names caseforeach var in internal_population internal_mean_contacts internal_stdev_contacts external_population external_mean_contacts external_stdev_contacts {replace `var'="" if `var'=="#NUL#"destring `var', replace}save "data\messagenetworksize_10-16.dta", replacestopsave "data\MS_collapse_by_tenant_merge_$S_DATE", replaceforeach var in msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSentPerUser_ext msgSentLowerQtileVal_ext msgSentUpperQtileVal_ext ///mtgHoursPerAt  mtgHoursLower mtgHoursUpper mtgsPerUser internal_mean_contacts external_mean_contacts ///s_TotTwoAttendeeMtgCount s_TotThreeAttendeeMtgCount s_TotFourAttendeeMtgCount s_TotFiveAttendeeMtgCount /// s_TotSixAttendeeMtgCount s_TotSevenAttendeeMtgCount s_TotEightAttendeeMtgCount s_TotNineAttendeeMtgCount s_TotTenPlusAttendeeMtgCount {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly areg produc `var'##c.`var' firm_age if majorbusiness~="" & (`var'>ptile1 & `var'<ptile99), absorb(country)local country_num=e(df_a)+1areg produc `var'##c.`var' countrydum* firm_age if (`var'>ptile1 & `var'<ptile99), absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')predict new if (`var'>ptile1 & `var'<ptile99)label var new "Predicted Productivity"twoway scatter produc `var' if (`var'>ptile1 & `var'<ptile99), mcolor(none) mlcolor(gray) ytitle("Predicted Productivity") yaxis(2)  || line new `var' if (`var'>ptile1 & `var'<ptile99), sort quietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") appendtwoway line new `var' if (`var'>ptile1 & `var'<ptile99), sort quietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") appenddrop ptile* new}