capture log closeclearset more offset scheme s1colorlog using "logs\\Analyses_to_MS_$S_DATE.log", replace/*use "data\\both2"countg lineofbusiness=majorbusinessreplace country=upper(country)merge m:m lineofbusiness using "data\\sic"save "data\\both3", replace*/*OCTOBER 25 2017*use "data\\both3"drop db_sizedrop counterg db_firmsize=""g db_firmsize_sort=0replace sic_small="" if sic_small=="-1"replace sic_small="" if sic_small=="NU"g counter=1g db_number_obs=0drop if msgSentPerUser_int==. & msgSentPerUser_ext==. & mtgsPerUser==. & mtgHoursPerAttendee==.forvalues x=1/25 {display "Firm Size = " `x'count if max_emp==`x'replace db_firmsize="Firm Size = `x'" if max_emp==`x'replace db_firmsize_sort=db_firmsize_sort+ `x' if  max_emp==`x'egen sum=sum(counter) if  max_emp==`x'replace db_number_obs=sum if  max_emp==`x'drop sum}forvalues x=26(5)100 {local y=`x'+4display "Firm Size = " `x' " to " `y'count if max_emp>=`x' & max_emp<=`y'replace db_firmsize="Firm Size =  `x'  to  `y'" if max_emp>=`x' & max_emp<=`y'replace db_firmsize_sort=db_firmsize_sort+ `x' if max_emp>=`x' & max_emp<=`y'egen sum=sum(counter) if  max_emp>=`x' & max_emp<=`y'replace db_number_obs=sum if  max_emp>=`x' & max_emp<=`y'drop sum}forvalues x=101(50)250 {local y=`x'+49display "Firm Size = " `x' " to " `y'count if max_emp>=`x' & max_emp<=`y'replace db_firmsize="Firm Size =  `x'  to  `y'" if max_emp>=`x' & max_emp<=`y'replace db_firmsize_sort=db_firmsize_sort+ `x' if max_emp>=`x' & max_emp<=`y'egen sum=sum(counter) if  max_emp>=`x' & max_emp<=`y'replace db_number_obs=sum if  max_emp>=`x' & max_emp<=`y'drop sum}count if max_emp>250sum max_emp if max_emp>250, detailreplace db_firmsize="Firm Size = over 250" if max_emp>250replace db_firmsize_sort=db_firmsize_sort+ 250 if max_emp>250egen sum=sum(counter) if  max_emp>250replace db_number_obs=sum if  max_emp>250drop sumsave "data\\both4", replacekeep db_*duplicates dropsave "data\\db_summary", replaceclearuse "data\\both4"drop _mcountjoinby omstenant using "data\\MS_tenant", unmatched(both)keep if _m==3replace max_rev=max_rev/1000000label var msgSentPerUser_int "Avg # of Msgs Sent per User (Internal)"label var msgSentPerUser_ext "Avg # of Msgs Sent per User (External)"label var mtgsPerUser "Avg # of Meetings per User "label var mtgHoursPerAttendee "Average # of Mtg Hrs per Attendee"label var TotTwoAttendeeMtgCount "# of Mtgs where Attendee Count = 2"label var TotThreeAttendeeMtgCount  "# of Mtgs where Attendee Count = 3"label var TotFourAttendeeMtgCount "# of Mtgs where Attendee Count = 4"label var TotFiveAttendeeMtgCount "# of Mtgs where Attendee Count = 5"label var min_year "Year Founded"label var max_rev "Revenue, in Millions"replace tenants="1. SMB: 1-250" if tenants=="SMB: 1-250"replace tenants="2. SMS&P (Medium/Large): 500-1000" if tenants=="SMS&P (Medium/Large): 500-1000"replace tenants="3. SMS&P (Medium/Small): 250-500" if tenants=="SMS&P (Medium/Small): 250-500"replace tenants="4. Corporate Enterprise (EPG): 1000-5000" if tenants=="Corporate Enterprise (EPG): 1000-5000"replace tenants="5. Major Large Enterprise: 5000+" if tenants=="Major Large Enterprise: 5000+"*keep if max_emp<=10forvalues x=1/10 {display "Summary Stats where Firm Size = " `x'sum msgSentPerUser_int msgSentPerUser_ext mtgsPerUser mtgHoursPerAttendee max_rev msgSenders* mtgAttendees total_population if max_emp==`x', detail}bysort tenants: sum max_emp, detailforeach var in msgSentPerUser_int   {sum `var' if max_emp==1*quietly areg max_rev c.`var'##c.`var' min_year if majorbusiness~="" & max_emp==1, absorb(country)quietly areg max_rev c.`var'##c.`var' min_year if max_emp==1, absorb(country)local country_num=e(df_a)+1areg max_rev c.`var'##c.`var' countrydum* min_year  if  max_emp==1, absorb(sic)*areg max_rev c.`var'##c.`var' countrydum* min_year  if  max_emp==1, absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE", replace excel  drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num', Number of Employees, 1)**Automate the margins calculations**/*egen max=max(`var') if max_emp==1 egen max2=max(max)replace max2=round(max2)egen min=min(`var') if max_emp==1 egen min2=min(min)replace min2=round(min2)g diff=max2-min2 replace diff=(diff/10)g diff2=round(diff)local x=min2local y=max2 local z=diff2**Calculate margins**margins, at(`var'=(`x'(`z')`y')) saving(data\\f`var', replace)marginsplot, ytitle("max_revtivity (max_rev per Employee in Millions)")  plotopts(msymbol(none)) title("max_revtivity by Level of" "`: variable label `var''") noci quietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") replacedrop  max max2 min min2 diff**/}foreach var in msgSentPerUser_ext mtgsPerUser mtgHoursPerAttendee  {sum `var' if max_emp==1*quietly areg max_rev c.`var'##c.`var' min_year if majorbusiness~="" & max_emp==1, absorb(country)quietly areg max_rev c.`var'##c.`var' min_year if  max_emp==1, absorb(country)local country_num=e(df_a)+1areg max_rev c.`var'##c.`var' countrydum* min_year  if  max_emp==1, absorb(sic)*areg max_rev c.`var'##c.`var' countrydum* min_year  if  max_emp==1, absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE", append excel  drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num', Number of Employees, 1)**Automate the margins calculations**egen max=max(`var') if max_emp==1 egen max2=max(max)replace max2=round(max2)egen min=min(`var') if max_emp==1 egen min2=min(min)replace min2=round(min2)g diff=max2-min2 replace diff=(diff/10)g diff2=round(diff)local x=min2local y=max2 local z=diff2**Calculate margins**margins, at(`var'=(`x'(`z')`y')) saving(data\\f`var', replace)marginsplot, ytitle("max_revtivity (max_rev per Employee in Millions)")  plotopts(msymbol(none)) title("max_revtivity by Level of" "`: variable label `var''") noci quietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") replacedrop  max max2 min min2 diff*}forvalues x=2/10 {foreach var in msgSentPerUser_int msgSentPerUser_ext mtgsPerUser mtgHoursPerAttendee     {sum `var' if max_emp==`x'*quietly areg max_rev c.`var'##c.`var' min_year if majorbusiness~="" & max_emp==`x', absorb(country)quietly areg max_rev c.`var'##c.`var' min_year if max_emp==`x', absorb(country)local country_num=e(df_a)+1*areg max_rev c.`var'##c.`var' countrydum* min_year  if  max_emp==`x', absorb(major)areg max_rev c.`var'##c.`var' countrydum* min_year  if  max_emp==`x', absorb(sic)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num', Number of Employees, `x')/***Automate the margins calculations**egen max=max(`var') if max_emp==`x' egen max2=max(max)replace max2=round(max2)egen min=min(`var') if max_emp==`x' egen min2=min(min)replace min2=round(min2)g diff=max2-min2 replace diff=(diff/10)g diff2=round(diff)local a=min2local b=max2 local c=diff2**Calculate margins**margins, at(`var'=(`a'(`b')`c')) saving(data\\f`var', replace)marginsplot, ytitle("max_revtivity (max_rev per Employee in Millions)")  plotopts(msymbol(none)) title("max_revtivity by Level of" "`: variable label `var''") noci quietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") appenddrop  max max2 min min2 diff**/}}*//*dummy regression to open outreg files*/reg produc producoutreg2 using "output\\regression_larger_firms_$S_DATE",  excel replaceg big_size=""replace big_size="11-30 Employees" if max_emp>=11 & max_emp<=30replace big_size="31-50 Employees" if max_emp>=31 & max_emp<=50replace big_size="51-100 Employees" if max_emp>=51 & max_emp<=100replace big_size="101-250 Employees" if max_emp>=101 & max_emp<=250replace big_size="251+ Employees" if max_emp>=251*Checkingbysort big_size: tab max_empdrop if msgSentPerUser_int==. & msgSentPerUser_ext==. & mtgsPerUser==. & mtgHoursPerAttendee==. drop if produc==.foreach group in "11-30 Employees" "31-50 Employees" "51-100 Employees"  "101-250 Employees" "251+ Employees" {display "Summary Stats where Firm Size = " "`group'"sum max_emp msgSentPerUser_int msgSentPerUser_ext mtgsPerUser mtgHoursPerAttendee produc  msgSenders* mtgAttendees total_population if big_size=="`group'", detail}stopforeach group in "11-30 Employees" "31-50 Employees" "51-100 Employees"  "101-250 Employees" "251+ Employees" {foreach var in msgSentPerUser_int msgSentPerUser_ext mtgsPerUser mtgHoursPerAttendee     {*sum `var' if max_emp==`x'quietly areg produc c.`var'##c.`var' min_year if majorbusiness~="" & big_size=="`group'", absorb(country)*quietly areg max_rev c.`var'##c.`var' min_year if big_size=="`group'", absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* min_year  if  big_size=="`group'", absorb(major)*areg max_rev c.`var'##c.`var' countrydum* min_year  if  big_size=="`group'", absorb(sic)*outreg2 using "output\\regression_larger_firms_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num', Number of Employees, `group')outreg2 using "output\\regression_larger_firms_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num') addtext(Number of Employees, "`group'")}}stop*OCTOBER 24 2017*sum produc max_rev max_emp msgSentPerUser_int  msgSentPerUser_ext mtgsPerUser mtgHoursPerAttendee min_year sum produc max_rev max_emp msgSentPerUser_int  msgSentPerUser_ext mtgsPerUser mtgHoursPerAttendee min_year, detail stop/*foreach var in produc msgSentPerUser_int msgSentPerUser_ext mtgsPerUser mtgHoursPerAttendee TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount min_year {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)*sum `var' if `var'>ptile1 & `var'<ptile99zscore `var' if `var'>ptile1 & `var'<ptile99drop ptile*}/*foreach var in max_rev max_emp {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)sum `var' if `var'>ptile1 & `var'<ptile99drop ptile*}label var z_msgSentPerUser_int "Avg # of Msgs Sent per User (Internal, Standardized)"label var z_msgSentPerUser_ext "Avg # of Msgs Sent per User (External, Standardized)"label var z_mtgsPerUser "Avg # of Meetings per User (Standardized)"label var z_mtgHoursPerAttendee "Average # of Mtg Hrs per Attendee (Standardized)"label var z_TotTwoAttendeeMtgCount "# of Mtgs where Attendee Count = 2 (Standardized)"label var z_TotThreeAttendeeMtgCount  "# of Mtgs where Attendee Count = 3 (Standardized)"label var z_TotFourAttendeeMtgCount "# of Mtgs where Attendee Count = 4 (Standardized)"label var z_TotFiveAttendeeMtgCount "# of Mtgs where Attendee Count = 5 (Standardized)"label var z_min_year*drop outliers of the Productivity variable*egen ptile1=pctile(produc), p(1)egen ptile99=pctile(produc), p(99)drop if produc<=ptile1drop if produc>=ptile99drop ptile*d z_**/*/label var msgSentPerUser_int "Avg # of Msgs Sent per User (Internal)"label var msgSentPerUser_ext "Avg # of Msgs Sent per User (External)"label var mtgsPerUser "Avg # of Meetings per User "label var mtgHoursPerAttendee "Average # of Mtg Hrs per Attendee"label var TotTwoAttendeeMtgCount "# of Mtgs where Attendee Count = 2"label var TotThreeAttendeeMtgCount  "# of Mtgs where Attendee Count = 3"label var TotFourAttendeeMtgCount "# of Mtgs where Attendee Count = 4"label var TotFiveAttendeeMtgCount "# of Mtgs where Attendee Count = 5"label var min_year/*dummy figure so I can open up a Word file to put all the real figures in*/scatter msgSentPerUser_int msgSentPerUser_intquietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") replace/*dummy regression to open outreg files*/reg produc producoutreg2 using "output\\regression_no_outlier_$S_DATE",  excel replace*foreach var in msgSentPerUser_int msgSentPerUser_ext mtgsPerUser mtgHoursPerAttendee TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount    {foreach var in msgSentPerUser_int msgSentPerUser_ext mtgsPerUser mtgHoursPerAttendee     {*egen ptile1=pctile(`var'), p(1)*egen ptile99=pctile(`var'), p(99)*quietly areg z_produc c.z_`var'##c.z_`var' z_min_year if majorbusiness~="" & (`var'>ptile1 & `var'<ptile99), absorb(country)*quietly areg z_produc c.z_`var'##c.z_`var' z_min_year if majorbusiness~="", absorb(country)quietly areg produc c.`var'##c.`var' min_year if majorbusiness~="", absorb(country)local country_num=e(df_a)+1*areg produc c.`var'##c.`var' countrydum* firm_age if (`var'>ptile1 & `var'<ptile99), absorb(major)*areg z_produc c.z_`var'##c.z_`var' countrydum* z_min_year  , absorb(major)areg produc c.`var'##c.`var' countrydum* min_year  , absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')**Automate the margins calculations**egen max=max(`var') egen max2=max(max)replace max2=round(max2)egen min=min(`var') egen min2=min(min)replace min2=round(min2)g diff=max2-min2replace diff=(diff/10)g diff2=round(diff)local x=min2local y=max2 local z=diff2**Calculate margins***margins, at(z_`var'=(-1(1)9)) saving(data\\f`var', replace)margins, at(`var'=(`x'(`z')`y')) saving(data\\f`var', replace)**Plot margins**marginsplot, ytitle("Productivity (Revenue per Employee in Millions)")  plotopts(msymbol(none)) title("Productivity by Level of" "`: variable label `var''") noci *marginsplot, ytitle("Productivity (Revenue per Employee, Standardized)")  plotopts(msymbol(none)) title("Productivity by Level of" "`: variable label z_`var''") noci yscale(r(-1.5(.5)1)) ylabel(-1.5(.5)1) xscale(r(-1(1)9)) xlabel(-1(1)9) *marginsplot, ytitle("Productivity (Revenue per Employee, Standardized)")  plotopts(msymbol(none)) title("Productivity by Level of" "`: variable label z_`var''") noci yscale(r(-1.5(.5)1)) ylabel(-1.5(.5)1)quietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") append*drop ptile* newdrop  max* min min2 diff*}stopforeach var in TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount    {*egen ptile1=pctile(`var'), p(1)*egen ptile99=pctile(`var'), p(99)*quietly areg z_produc c.z_`var'##c.z_`var' z_min_year if majorbusiness~="" & (`var'>ptile1 & `var'<ptile99), absorb(country)g testvar=`var' g z_testvar=z_`var' quietly areg z_produc c.z_testvar##c.z_testvar z_min_year if majorbusiness~="", absorb(country)local country_num=e(df_a)+1*areg produc c.`var'##c.`var' countrydum* firm_age if (`var'>ptile1 & `var'<ptile99), absorb(major)areg z_produc c.z_testvar##c.z_testvar countrydum* z_min_year  , absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')**Automate the margins calculations**egen max=max(z_testvar) egen max2=max(max)replace max2=round(max2)egen min=min(z_testvar) egen min2=min(min)replace min2=round(min2)g diff=max2-min2replace diff=(diff/10)g diff2=round(diff)local x=min2local y=max2 local z=diff2**Calculate margins**margins, at(z_testvar=(-1(1)9)) saving(data\\f`var', replace)  *margins, at(z_`var'=(`x'(`z')`y')) saving(data\\f`var', replace)**Plot margins**marginsplot, ytitle("Productivity (Revenue per Employee, Standardized)")  plotopts(msymbol(none)) title("Productivity by Level of" "`: variable label z_`var''") noci yscale(r(-1.5(.5)1)) ylabel(-1.5(.5)1) xscale(r(-1(1)9)) xlabel(-1(1)9) *marginsplot, ytitle("Productivity (Revenue per Employee, Standardized)")  plotopts(msymbol(none)) title("Productivity by Level of" "`: variable label z_`var''") noci yscale(r(-1.5(.5)1)) ylabel(-1.5(.5)1)quietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") append*drop ptile* newdrop  max* min* diff* testvar z_testvar}combomarginsplot data\\fTotTwoAttendeeMtgCount data\\fTotThreeAttendeeMtgCount data\\fTotFourAttendeeMtgCount data\\fTotFiveAttendeeMtgCountstopoprobit rep78 i.foreign mpg price weightmargins foreign, at(mpg=(10(5)50)) predict(outcome(3)) saving(file1, replace)oprobit rep78 i.foreign mpgmargins foreign, at(mpg=(10(5)50)) predict(outcome(3)) saving(file2, replace)oprobit rep78 i.foreign mpg gearmargins foreign, at(mpg=(10(5)50)) predict(outcome(3)) saving(file3, replace)combomarginsplot file1 file2 file3, ///    labels("Full model" "Restricted model" "Gear Model") noci	STOP***REGRESSIONS AND FIGURES - FULL SAMPLE***quietly areg produc firm_age, absorb(country)local country_num=e(df_a)+1areg produc countrydum* firm_age, absorb(major) outreg2 using "output\\regression_full_$S_DATE", addnote("Uses dummies to control for line of business") excel replace drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')outreg2 using "output\\regression_no_outlier_$S_DATE", addnote("Uses dummies to control for line of business") excel replace drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')*full sample regressions*foreach var in msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSentPerUser_ext msgSentLowerQtileVal_ext msgSentUpperQtileVal_ext ///mtgHoursPerAt  mtgHoursLower mtgHoursUpper mtgsPerUser internal_mean_contacts external_mean_contacts ///s_TotTwoAttendeeMtgCount s_TotThreeAttendeeMtgCount s_TotFourAttendeeMtgCount s_TotFiveAttendeeMtgCount /// s_TotSixAttendeeMtgCount s_TotSevenAttendeeMtgCount s_TotEightAttendeeMtgCount s_TotNineAttendeeMtgCount s_TotTenPlusAttendeeMtgCount /// TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount /// TotSixAttendeeMtgCount TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount {*areg produc `var', absorb(major)*outreg2 using "output\\regression_full",  excel append label dec(4)*areg produc `var' countrydum*, absorb(major)*outreg2 using "output\\regression_full", excel append drop(countrydum* o.countrydum*)  label dec(4)quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="", absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age, absorb(major)outreg2 using "output\\regression_full_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')*controlling for # employees doesn't matter*areg produc `var' max_emp, absorb(major)*outreg2 using "output\\regression", addnote("Controlling for line of business") excel append}*Regressions and figures dropping the outliers of the IVs*foreach var in msgSentPerUser_int  msgSentUpperQtileVal_int msgSentPerUser_ext  msgSentUpperQtileVal_ext ///mtgHoursUpper mtgsPerUser internal_mean_contacts external_mean_contacts ///TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount TotSixAttendeeMtgCount {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & (`var'>ptile1 & `var'<ptile99), absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if (`var'>ptile1 & `var'<ptile99), absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')**Automate the margins calculations**egen max=max(`var') if `var'<=ptile99egen max2=max(max)replace max2=round(max2)egen min=min(`var') if `var'>=ptile1egen min2=min(min)replace min2=round(min2)g diff=max2-min2replace diff=(diff/10)g diff2=round(diff)local x=min2local y=max2 local z=diff2**Calculate margins**margins, at(`var'=(`x'(`z')`y'))**Plot margins**marginsplot, ytitle("Productivity, Millions")  plotopts(msymbol(none)) title("Productivity by Level of `var'") nociquietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") append*drop ptile* newdrop ptile* max* min* diff*}*Regressions and figures dropping the outliers of the IVs*foreach var in TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount mtgHoursLowerQtileVal msgSentLowerQtileVal_ext msgSentLowerQtileVal_int mtgHoursPerAttendee {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & (`var'>ptile1 & `var'<ptile99), absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if (`var'>ptile1 & `var'<ptile99), absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')**Automate the margins calculations**egen max=max(`var') if `var'<=ptile99egen max2=max(max)replace max2=round(max2, .01)egen min=min(`var') if `var'>=ptile1egen min2=min(min)replace min2=round(min2, .01)g diff=max2-min2replace diff=(diff/10)g diff2=round(diff, .01)local x=min2local y=max2 local z=diff2**Calculate margins**margins, at(`var'=(`x'(`z')`y'))**Plot margins**marginsplot, ytitle("Productivity, Millions")  plotopts(msymbol(none)) title("Productivity by Level of `var'") nociquietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") append*drop ptile* newdrop ptile* max* min* diff*}*We don't want to drop outliers of the share IVs*foreach var in s_TotTwoAttendeeMtgCount s_TotThreeAttendeeMtgCount s_TotFourAttendeeMtgCount s_TotFiveAttendeeMtgCount /// s_TotSixAttendeeMtgCount s_TotSevenAttendeeMtgCount s_TotEightAttendeeMtgCount s_TotNineAttendeeMtgCount s_TotTenPlusAttendeeMtgCount {quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" , absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age, absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')**Automate the margins calculations**egen max=max(`var') egen max2=max(max)replace max2=round(max2, .01)egen min=min(`var')egen min2=min(min)replace min2=round(min2, .01)g diff=max2-min2replace diff=(diff/10)g diff2=round(diff, .01)local x=min2local y=max2 local z=diff2**Calculate margins**margins, at(`var'=(`x'(`z')`y'))**Plot margins**marginsplot, ytitle("Productivity, Millions")  plotopts(msymbol(none)) title("Productivity by Level of `var'") nociquietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") append*drop ptile* newdrop  max* min* diff*}*/***REGRESSIONS BY SIZE***levelsof db_size, local(levels)quietly areg produc firm_age, absorb(country)local country_num=e(df_a)+1areg produc countrydum* firm_age, absorb(major) outreg2 using "output\\regression_full_bysize_$S_DATE", addnote("Uses dummies to control for line of business") excel replace drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')outreg2 using "output\\regression_no_outlier_bysize_$S_DATE", addnote("Uses dummies to control for line of business") excel replace drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')foreach var in msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSentPerUser_ext msgSentLowerQtileVal_ext msgSentUpperQtileVal_ext ///mtgHoursPerAt  mtgHoursLower mtgHoursUpper mtgsPerUser internal_mean_contacts external_mean_contacts ///s_TotTwoAttendeeMtgCount s_TotThreeAttendeeMtgCount s_TotFourAttendeeMtgCount s_TotFiveAttendeeMtgCount /// s_TotSixAttendeeMtgCount s_TotSevenAttendeeMtgCount s_TotEightAttendeeMtgCount s_TotNineAttendeeMtgCount s_TotTenPlusAttendeeMtgCount /// TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount /// TotSixAttendeeMtgCount TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount {quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="", absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age, absorb(major)outreg2 using "output\\regression_full_bysize_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')  ctitle("Productivity ALL")foreach l of local levels {quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & db_size=="`l'", absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if db_size=="`l'", absorb(major)outreg2 using "output\\regression_full_bysize_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')  ctitle("Productivity `l'")}}egen ptile1=pctile(produc), p(1)egen ptile99=pctile(produc), p(99)drop if produc<=ptile1drop if produc>=ptile99drop ptile*foreach var in msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSentPerUser_ext msgSentLowerQtileVal_ext msgSentUpperQtileVal_ext ///mtgHoursPerAt  mtgHoursLower mtgHoursUpper mtgsPerUser internal_mean_contacts external_mean_contacts ///s_TotTwoAttendeeMtgCount s_TotThreeAttendeeMtgCount s_TotFourAttendeeMtgCount s_TotFiveAttendeeMtgCount /// s_TotSixAttendeeMtgCount s_TotSevenAttendeeMtgCount s_TotEightAttendeeMtgCount s_TotNineAttendeeMtgCount s_TotTenPlusAttendeeMtgCount /// TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount /// TotSixAttendeeMtgCount TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & (`var'>ptile1 & `var'<ptile99), absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if (`var'>ptile1 & `var'<ptile99), absorb(major)outreg2 using "output\\regression_no_outlier_bysize_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')  ctitle("Productivity ALL")foreach l of local levels {quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & db_size=="`l'" & (`var'>ptile1 & `var'<ptile99), absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if db_size=="`l'" & (`var'>ptile1 & `var'<ptile99), absorb(major)outreg2 using "output\\regression_no_outlier_bysize_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')  ctitle("Productivity `l'")}drop ptile*}