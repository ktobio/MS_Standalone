capture log closeclearset more offset scheme s1colorlog using "logs\\Analyses_to_MS_$S_DATE", replaceuse "data\\both2"*OCTOBER 24 2017*foreach var in produc msgSentPerUser_int msgSentPerUser_ext mtgsPerUser mtgHoursPerAttendee TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount min_year {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)sum `var' if `var'>ptile1 & `var'<ptile99zscore `var' if `var'>ptile1 & `var'<ptile99drop ptile*}foreach var in max_rev max_emp {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)sum `var' if `var'>ptile1 & `var'<ptile99drop ptile*}stoplabel var z_msgSentPerUser_int "Avg # of Msgs Sent per User (Internal, Standardized)"label var z_msgSentPerUser_ext "Avg # of Msgs Sent per User (External, Standardized)"label var z_mtgsPerUser "Avg # of Meetings per User (Standardized)"label var z_mtgHoursPerAttendee "Average # of Mtg Hrs per Attendee (Standardized)"label var z_TotTwoAttendeeMtgCount "# of Mtgs where Attendee Count = 2 (Standardized)"label var z_TotThreeAttendeeMtgCount  "# of Mtgs where Attendee Count = 3 (Standardized)"label var z_TotFourAttendeeMtgCount "# of Mtgs where Attendee Count = 4 (Standardized)"label var z_TotFiveAttendeeMtgCount "# of Mtgs where Attendee Count = 5 (Standardized)"label var z_min_year*drop outliers of the Productivity variable*egen ptile1=pctile(produc), p(1)egen ptile99=pctile(produc), p(99)drop if produc<=ptile1drop if produc>=ptile99drop ptile*d z_*/*dummy figure so I can open up a Word file to put all the real figures in*/scatter msgSentPerUser_int msgSentPerUser_intquietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") replace/*dummy regression to open outreg files*/reg z_produc z_producoutreg2 using "output\\regression_no_outlier_$S_DATE",  excel replaceforeach var in msgSentPerUser_int msgSentPerUser_ext mtgsPerUser mtgHoursPerAttendee TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount    {*egen ptile1=pctile(`var'), p(1)*egen ptile99=pctile(`var'), p(99)*quietly areg z_produc c.z_`var'##c.z_`var' z_min_year if majorbusiness~="" & (`var'>ptile1 & `var'<ptile99), absorb(country)quietly areg z_produc c.z_`var'##c.z_`var' z_min_year if majorbusiness~="", absorb(country)local country_num=e(df_a)+1*areg produc c.`var'##c.`var' countrydum* firm_age if (`var'>ptile1 & `var'<ptile99), absorb(major)areg z_produc c.z_`var'##c.z_`var' countrydum* z_min_year  , absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')**Automate the margins calculations**egen max=max(z_`var') egen max2=max(max)replace max2=round(max2)egen min=min(z_`var') egen min2=min(min)replace min2=round(min2)g diff=max2-min2replace diff=(diff/10)g diff2=round(diff)local x=min2local y=max2 local z=diff2**Calculate margins***margins, at(z_`var'=(-1(1)9)) saving(data\\f`var', replace)margins, at(z_`var'=(`x'(`z')`y')) saving(data\\f`var', replace)**Plot margins**marginsplot, ytitle("Productivity (Revenue per Employee, Standardized)")  plotopts(msymbol(none)) title("Productivity by Level of" "`: variable label z_`var''") noci yscale(r(-1.5(.5)1)) ylabel(-1.5(.5)1) xscale(r(-1(1)9)) xlabel(-1(1)9) *marginsplot, ytitle("Productivity (Revenue per Employee, Standardized)")  plotopts(msymbol(none)) title("Productivity by Level of" "`: variable label z_`var''") noci yscale(r(-1.5(.5)1)) ylabel(-1.5(.5)1)quietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") append*drop ptile* newdrop  max* min* diff*}combomarginsplot data\\fTotTwoAttendeeMtgCount data\\fTotThreeAttendeeMtgCount data\\fTotFourAttendeeMtgCount data\\fTotFiveAttendeeMtgCountstopoprobit rep78 i.foreign mpg price weightmargins foreign, at(mpg=(10(5)50)) predict(outcome(3)) saving(file1, replace)oprobit rep78 i.foreign mpgmargins foreign, at(mpg=(10(5)50)) predict(outcome(3)) saving(file2, replace)oprobit rep78 i.foreign mpg gearmargins foreign, at(mpg=(10(5)50)) predict(outcome(3)) saving(file3, replace)combomarginsplot file1 file2 file3, ///    labels("Full model" "Restricted model" "Gear Model") noci	STOP***REGRESSIONS AND FIGURES - FULL SAMPLE***quietly areg produc firm_age, absorb(country)local country_num=e(df_a)+1areg produc countrydum* firm_age, absorb(major) outreg2 using "output\\regression_full_$S_DATE", addnote("Uses dummies to control for line of business") excel replace drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')outreg2 using "output\\regression_no_outlier_$S_DATE", addnote("Uses dummies to control for line of business") excel replace drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')*full sample regressions*foreach var in msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSentPerUser_ext msgSentLowerQtileVal_ext msgSentUpperQtileVal_ext ///mtgHoursPerAt  mtgHoursLower mtgHoursUpper mtgsPerUser internal_mean_contacts external_mean_contacts ///s_TotTwoAttendeeMtgCount s_TotThreeAttendeeMtgCount s_TotFourAttendeeMtgCount s_TotFiveAttendeeMtgCount /// s_TotSixAttendeeMtgCount s_TotSevenAttendeeMtgCount s_TotEightAttendeeMtgCount s_TotNineAttendeeMtgCount s_TotTenPlusAttendeeMtgCount /// TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount /// TotSixAttendeeMtgCount TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount {*areg produc `var', absorb(major)*outreg2 using "output\\regression_full",  excel append label dec(4)*areg produc `var' countrydum*, absorb(major)*outreg2 using "output\\regression_full", excel append drop(countrydum* o.countrydum*)  label dec(4)quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="", absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age, absorb(major)outreg2 using "output\\regression_full_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')*controlling for # employees doesn't matter*areg produc `var' max_emp, absorb(major)*outreg2 using "output\\regression", addnote("Controlling for line of business") excel append}*Regressions and figures dropping the outliers of the IVs*foreach var in msgSentPerUser_int  msgSentUpperQtileVal_int msgSentPerUser_ext  msgSentUpperQtileVal_ext ///mtgHoursUpper mtgsPerUser internal_mean_contacts external_mean_contacts ///TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount TotSixAttendeeMtgCount {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & (`var'>ptile1 & `var'<ptile99), absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if (`var'>ptile1 & `var'<ptile99), absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')**Automate the margins calculations**egen max=max(`var') if `var'<=ptile99egen max2=max(max)replace max2=round(max2)egen min=min(`var') if `var'>=ptile1egen min2=min(min)replace min2=round(min2)g diff=max2-min2replace diff=(diff/10)g diff2=round(diff)local x=min2local y=max2 local z=diff2**Calculate margins**margins, at(`var'=(`x'(`z')`y'))**Plot margins**marginsplot, ytitle("Productivity, Millions")  plotopts(msymbol(none)) title("Productivity by Level of `var'") nociquietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") append*drop ptile* newdrop ptile* max* min* diff*}*Regressions and figures dropping the outliers of the IVs*foreach var in TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount mtgHoursLowerQtileVal msgSentLowerQtileVal_ext msgSentLowerQtileVal_int mtgHoursPerAttendee {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & (`var'>ptile1 & `var'<ptile99), absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if (`var'>ptile1 & `var'<ptile99), absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')**Automate the margins calculations**egen max=max(`var') if `var'<=ptile99egen max2=max(max)replace max2=round(max2, .01)egen min=min(`var') if `var'>=ptile1egen min2=min(min)replace min2=round(min2, .01)g diff=max2-min2replace diff=(diff/10)g diff2=round(diff, .01)local x=min2local y=max2 local z=diff2**Calculate margins**margins, at(`var'=(`x'(`z')`y'))**Plot margins**marginsplot, ytitle("Productivity, Millions")  plotopts(msymbol(none)) title("Productivity by Level of `var'") nociquietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") append*drop ptile* newdrop ptile* max* min* diff*}*We don't want to drop outliers of the share IVs*foreach var in s_TotTwoAttendeeMtgCount s_TotThreeAttendeeMtgCount s_TotFourAttendeeMtgCount s_TotFiveAttendeeMtgCount /// s_TotSixAttendeeMtgCount s_TotSevenAttendeeMtgCount s_TotEightAttendeeMtgCount s_TotNineAttendeeMtgCount s_TotTenPlusAttendeeMtgCount {quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" , absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age, absorb(major)outreg2 using "output\\regression_no_outlier_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')**Automate the margins calculations**egen max=max(`var') egen max2=max(max)replace max2=round(max2, .01)egen min=min(`var')egen min2=min(min)replace min2=round(min2, .01)g diff=max2-min2replace diff=(diff/10)g diff2=round(diff, .01)local x=min2local y=max2 local z=diff2**Calculate margins**margins, at(`var'=(`x'(`z')`y'))**Plot margins**marginsplot, ytitle("Productivity, Millions")  plotopts(msymbol(none)) title("Productivity by Level of `var'") nociquietly graph export "output\\tmp.png", replacepng2rtf using "output\\overload_$S_DATE.doc", g("output\\tmp.png") append*drop ptile* newdrop  max* min* diff*}*/***REGRESSIONS BY SIZE***levelsof db_size, local(levels)quietly areg produc firm_age, absorb(country)local country_num=e(df_a)+1areg produc countrydum* firm_age, absorb(major) outreg2 using "output\\regression_full_bysize_$S_DATE", addnote("Uses dummies to control for line of business") excel replace drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')outreg2 using "output\\regression_no_outlier_bysize_$S_DATE", addnote("Uses dummies to control for line of business") excel replace drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')foreach var in msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSentPerUser_ext msgSentLowerQtileVal_ext msgSentUpperQtileVal_ext ///mtgHoursPerAt  mtgHoursLower mtgHoursUpper mtgsPerUser internal_mean_contacts external_mean_contacts ///s_TotTwoAttendeeMtgCount s_TotThreeAttendeeMtgCount s_TotFourAttendeeMtgCount s_TotFiveAttendeeMtgCount /// s_TotSixAttendeeMtgCount s_TotSevenAttendeeMtgCount s_TotEightAttendeeMtgCount s_TotNineAttendeeMtgCount s_TotTenPlusAttendeeMtgCount /// TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount /// TotSixAttendeeMtgCount TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount {quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="", absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age, absorb(major)outreg2 using "output\\regression_full_bysize_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')  ctitle("Productivity ALL")foreach l of local levels {quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & db_size=="`l'", absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if db_size=="`l'", absorb(major)outreg2 using "output\\regression_full_bysize_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')  ctitle("Productivity `l'")}}egen ptile1=pctile(produc), p(1)egen ptile99=pctile(produc), p(99)drop if produc<=ptile1drop if produc>=ptile99drop ptile*foreach var in msgSentPerUser_int msgSentLowerQtileVal_int msgSentUpperQtileVal_int msgSentPerUser_ext msgSentLowerQtileVal_ext msgSentUpperQtileVal_ext ///mtgHoursPerAt  mtgHoursLower mtgHoursUpper mtgsPerUser internal_mean_contacts external_mean_contacts ///s_TotTwoAttendeeMtgCount s_TotThreeAttendeeMtgCount s_TotFourAttendeeMtgCount s_TotFiveAttendeeMtgCount /// s_TotSixAttendeeMtgCount s_TotSevenAttendeeMtgCount s_TotEightAttendeeMtgCount s_TotNineAttendeeMtgCount s_TotTenPlusAttendeeMtgCount /// TotTwoAttendeeMtgCount TotThreeAttendeeMtgCount TotFourAttendeeMtgCount TotFiveAttendeeMtgCount /// TotSixAttendeeMtgCount TotSevenAttendeeMtgCount TotEightAttendeeMtgCount TotNineAttendeeMtgCount TotTenPlusAttendeeMtgCount {egen ptile1=pctile(`var'), p(1)egen ptile99=pctile(`var'), p(99)quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & (`var'>ptile1 & `var'<ptile99), absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if (`var'>ptile1 & `var'<ptile99), absorb(major)outreg2 using "output\\regression_no_outlier_bysize_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')  ctitle("Productivity ALL")foreach l of local levels {quietly areg produc c.`var'##c.`var' firm_age if majorbusiness~="" & db_size=="`l'" & (`var'>ptile1 & `var'<ptile99), absorb(country)local country_num=e(df_a)+1areg produc c.`var'##c.`var' countrydum* firm_age if db_size=="`l'" & (`var'>ptile1 & `var'<ptile99), absorb(major)outreg2 using "output\\regression_no_outlier_bysize_$S_DATE",  excel append drop(countrydum* o.countrydum*)  label dec(4) addstat(Number of Industries, `e(df_a)'+1, Number of Countries, `country_num')  ctitle("Productivity `l'")}drop ptile*}