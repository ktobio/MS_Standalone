capture log closeclearset more offset scheme s1color/*Questions - there are some companies not in the DandB dataEngland v. UKi think i should do it so each OmsID has countries, etc all to the right, and merge just on OmsIDfigure out the countries in the MS data that doesn't have the meta data. keep if OmsTenantId=="fd799da1-bfc1-4234-a91c-72b3a1cb9e26"(668,069 observations deleted). count  2,314  up to 125 detailed businesses   */log using "logs\powerpoint_$S_DATE", replace/*use "data\MS_collapse_by_tenant_merge_21 Aug 2017"drop _mergesave "data\MS_collapse_by_tenant_merge_$S_DATE", replaceclearinsheet using "data\tenantmetadata_09.14.csv", names caseforeach var in YEARSTARTED GRWPCT {replace `var'="" if `var'=="NULL"destring `var', replace}foreach var in GRWSIGN GRWTYPE {replace `var'="" if `var'=="NULL"}drop if Oms==""save "data\tenant_metadata", replacedrop POSTALCD GRWPCT GRWSIGN GRWTYPE CITYduplicates drop/*for now, do max revenue only. Add together?*/bysort Oms: egen maxrevenue=max(REV)/*i decided summing was better*/bysort Oms: egen sumrevenue=sum(REV)/*For now, do ealiest year founded*/bysort Oms: egen earlyyear=min(YEAR)/*For now, do max of employees. Sum?*/bysort Oms: egen maxemploy=max(EMP)/*i decided summing was better*/bysort Oms: egen sumemploy=sum(EMP)drop REVENUEdrop YEARdrop EMP/*replace COUNTRY="United Kingdom" if COUNTRY=="ENGLAND"replace COUNTRY="United Kingdom" if COUNTRY=="NORTHERN IRELAND"replace COUNTRY="United Kingdom" if COUNTRY=="SCOTLAND"replace COUNTRY="United Kingdom" if COUNTRY=="WALES"replace COUNTRY="United States" if COUNTRY=="USA"replace COUNTRY=proper(COUNTRY)*/*bysort Oms COUNTRY LINE: egen minyear=min(YEAR)duplicates drop*bysort Oms COUNTRY YEAR: g counter=_nbysort Oms : g counter=_nsum counter, detailbysort Oms: egen max=max(counter)sum max, detaildrop LINEdrop counterduplicates dropbysort Oms : g counter=_nsum counter, detaildrop maxreshape wide COUN, i(Oms max* sum*) j(counter)save "data\tenant_metadata2", replaceclearuse "data\tenant_metadata2"joinby Oms using "data\MS_collapse_by_tenant_merge_$S_DATE", unmatched(both)tab Country if _m==1tab Country if _m==2tab Country if _m==3/* calculating the countries NOT in D&B"keep Country _mbysort Country: g counter=_nbysort Country: egen max=max(counter)keep if max==1counttab Country*/keep if _m==3save "data\meta_MS_merge_$S_DATE", replaceclear*/*THIS IS FULL DATASET*use "data\tenant_metadata"tab COUNTRYreplace COUNTRY=proper(COUNTRY)replace REVENUE=REVENUE/1000000label var REVENUE  "Revenue, in $M"g productivity= REVENUE/ EMPCOUNTsum productivity, detailhistogram productivity, percent b1title("Productivity (Revenue/Employees in Mill)")graph save "output\\prod_metadata", replacegraph export "output\\prod_metadata.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_metadata.png") replacesum REVENUE, detailsum EMPCOUNT, detailsum productivity, detailegen ptile1_productivity=pctile(productivity), p(1)egen ptile99_productivity=pctile(productivity), p(99)egen ptile999_productivity=pctile(productivity), p(99.9)histogram productivity if productivity>=ptile1_productivity & productivity<=ptile99_productivity, percent b1title("Prod (Rev/Emp) in Mill" "No outliers")graph save "output\\prod_metadata_s", replacegraph export "output\\prod_metadata_s.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_metadata_s.png") appendbysort COUNTRY: egen productivity2=mean(productivity) if EMPCOUNT<=2gsort -productivity2g order=_ngraph bar productivity2 if EMPCOUNT<=2, over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp) in Mill") xsize(8) b1title("Countries" "# Employees<=2") nofillgraph save "output\\prod_2", replacegraph export "output\\prod_2.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_2.png") appenddrop productivity2 order bysort COUNTRY: egen productivity2=mean(productivity) if EMPCOUNT>2 & EMPCOUNT<=6gsort -productivity2g order=_ngraph bar productivity2 if EMPCOUNT>2 & EMPCOUNT<=6, over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp) in Mill") xsize(8) b1title("Countries" "# Employees 2-6") nofillgraph save "output\\prod_2_6", replacegraph export "output\\prod_2_6.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_2_6.png") appenddrop productivity2 order bysort COUNTRY: egen productivity2=mean(productivity) if EMPCOUNT>6 & EMPCOUNT<=20gsort -productivity2g order=_ngraph bar productivity2 if EMPCOUNT>6 & EMPCOUNT<=20, over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp) in Mill") xsize(8) b1title("Countries" "# Employees 6-20") nofillgraph save "output\\prod_6_20", replacegraph export "output\\prod_6_20.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_6_20.png") appenddrop productivity2 order bysort COUNTRY: egen productivity2=mean(productivity) if EMPCOUNT>20 & EMPCOUNT<=100gsort -productivity2g order=_ngraph bar productivity2 if EMPCOUNT>20 & EMPCOUNT<=100, over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp) in Mill") xsize(8) b1title("Countries" "# Employees 20-100") nofillgraph save "output\\prod_20_100", replacegraph export "output\\prod_20_100.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_20_100.png") appenddrop productivity2 order bysort COUNTRY: egen productivity2=mean(productivity) if EMPCOUNT>100 gsort -productivity2g order=_ngraph bar productivity2 if EMPCOUNT>100, over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp) in Mill") xsize(8) b1title("Countries" "# Employees 100+") nofillgraph save "output\\prod_100", replacegraph export "output\\prod_100.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_100.png") appenddrop productivity2 order bysort COUNTRY: egen productivity2=mean(productivity)gsort -productivity2g order=_ngraph bar productivity2 , over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp), in Mill") xsize(8) b1title("Countries") nofillgraph save "output\\prod_big", replacegraph export "output\\prod_big.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_big.png") appenddrop productivity2 order drop if productivity<=ptile1_productivity drop if productivity>=ptile99_productivitybysort COUNTRY: egen productivity2=mean(productivity)gsort -productivity2g order=_ngraph bar productivity2 , over(COUNTRY, sort(order) label(angle(45) labsize(vsmall))) ytitle("Prod (Rev/Emp), in Mill") xsize(8) b1title("Countries" "No Outliers") nofillgraph save "output\\prod_s", replacegraph export "output\\prod_s.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_s.png") appendclear*THIS IS ONLY MERGED*This country uses the country that is in the MS datause "data\meta_MS_merge_$S_DATE/*g match=0forvalues x=1/14 {replace match=1 if COUNTRY`x'==Country}/*if match=0, there countries don't match with D&B*/log using "logs/tenants_$S_DATE", replace*bysort TenantSize: sum maxemp, detail/*This is weird*/bysort TenantSize: sum sumemp, detail*/replace maxrevenue=maxrevenue/1000000label var maxrevenue "Maximum revenue - in Millions"replace sumrevenue=sumrevenue/1000000label var sumrevenue "Sum of revenue - in Millions"g productivity=sumrevenue/sumempsum maxrevenue, detailsum sumrevenue, detailsum sumemp, detailsum productivity, detailbysort Country: egen productivity2=mean(productivity)gsort -productivity2g order=_ngraph bar productivity2, over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle("Productivity (Revenue/Employee)in mill") xsize(8) b1title("Countries") nofillgraph save "output\\prod", replacegraph export "output\\prod.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod.png") appendbysort Country: g counter=_ngsort -productivity2list Country productivity2 if counter==1drop counterforeach var in maxrevenue sumemp productivity msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize {egen ptile1_`var'=pctile(`var'), p(1)egen ptile99_`var'=pctile(`var'), p(99)egen ptile999_`var'=pctile(`var'), p(99.9)}drop if productivity<=ptile1_productivitydrop if productivity>=ptile99_productivitydrop productivity2drop orderbysort Country: egen productivity2=mean(productivity)gsort -productivity2g order=_ngraph bar productivity2, over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle("Productivity (Revenue/Employee)in mill") xsize(8) b1title("Countries" "no outliers") nofillgraph save "output\\prod_small", replacegraph export "output\\prod_small.png", replacepng2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_small.png") appendbysort Country: g counter=_ngsort -productivity2list Country productivity2 if counter==1drop countersave "data\meta_MS_merge_2_$S_DATE", replacecollapse (mean) maxrevenue sumemp msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize  productivity ptile*, by (Country)foreach var in maxrevenue sumemp msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize  {pwcorr productivity `var' if `var'>= ptile1_`var' & `var'<= ptile99_`var', sigscatter productivity `var' if `var'>= ptile1_`var' & `var'<= ptile99_`var', ||  lfit productivity `var' if `var'>= ptile1_`var' & `var'<= ptile99_`var'*graph save "output\\prod_`var'", replace*graph export "output\\prod_`var'.png", replace*png2rtf using "output\\prod_$S_DATE.doc", g("output\\prod_`var'.png") append}dotplot productivityclearuse "data\meta_MS_merge_2_$S_DATE"*do something by size*stopforeach var in idv_reverse lto pdi {gsort -`var'g order=_nlocal mytitle : variable label `var'*graph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle(`mytitle') xsize(8) b1title("Countries") nofillegen mean=mean(`var')local mean=meangraph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle(`mytitle') xsize(8)  nofill yline(`mean')  bar(1,color(blue))drop order meangraph save "output\\`var'", replacegraph export "output\\`var'.png", replace}stopstopdrop if _m==1drop _mstopstopdrop GRWPCT GRWSIGN GRWTYPE POSTALCD POSTALCD CITY COUNTRYjoinby Oms using "data\MS_collapse_by_tenant_merge_$S_DATE", unmatched(both)g match=0forvalues x=1/14 {replace match=1 if Country==COUNTRY`x'}stop/*use "data\network_upper_lower"bysort tenant: sum *upper* *lower*clear*/ /*use "data\MS_collapse_by_tenant_merge_ 4 Aug 2017"drop if Country==""drop if Oms==""replace MeanUtilizatio=. if MeanUtilizatio<0g idv_reverse=100-idvlabel var idv_reverse "Hofstede: Collectivism. Higher = valued more"replace Country="Macedonia" if Country=="Macedonia (Former Yugoslav Republic of Macedonia)"**Note updated data has some numbers that fall outside the 100 topcode: http://geerthofstede.com/research-and-vsm/dimension-data-matrix**save "data\MS_collapse_by_tenant_merge_$S_DATE", replace*Summarize msg sent per user by categories*sum msgSentPerUser if sizedum5==1 & Country=="United States" & IndustryG=="Technology"sum msgSentPerUser if sizedum5==1 & Country=="France" & IndustryG=="Technology"sum msgSentPerUser if sizedum1==1 & Country=="United States" & IndustryG=="Professional Services"sum msgSentPerUser if sizedum5==1 & Country=="United States" & IndustryG=="Professional Services"*Tenant calculations**cutting off the highest ones at 50,000Kg counter=1collapse (sum) counter, by (Country)gsort -counterg order=_nlist Country counter if counter>=50000replace counter=50000 if counter>=50000graph bar counter, over(Country, sort(order) label(nolabels)) ytitle("Number of Tenants") xsize(9)graph save "output\\tenants_cutoffa", replacegraph export "output\\tenants_cutoffa.png", replacegraph bar counter, over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle("Number of Tenants") xsize(12)graph save "output\\tenants_cutoffb", replacegraph export "output\\tenants_cutoffb.png", replacestopdrop orderclearuse "data\MS_collapse_by_tenant_merge_$S_DATE"keep yr2015broadband yr2015gdp_pc yr2016pop Countryduplicates dropreplace yr2016=yr2016/1000000label var yr2016pop "Total Population 2016 in Millions"label var yr2015broad "Fixed broadband subscriptions 2015 per 100 people"foreach var in yr2015broadband yr2015gdp_pc yr2016pop {gsort -`var'g order=_nlocal mytitle : variable label `var'egen mean=mean(`var')local mean=meangraph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle(`mytitle') xsize(11)  nofill yline(`mean')  bar(1,color(orange))drop order meangraph save "output\\`var'", replacegraph export "output\\`var'.png", replace}stopxtile tenant_quint = counter, nq(5)gsort -tenantg order=_nlabel define lblname 1 "1st Quintile" 2 "2nd Quintile" 3 "3rd Quintile" 4 "4th Quintile" 5 "5th Quintile"label values tenant lblname graph bar counter, over(tenant_quint, sort(order) ) ytitle("Mean # of Tenants, by Country Quintile")  b1title("Country Quintile") xsize(8)graph save "output\\tenants", replacegraph export "output\\tenants.png", replaceclearuse "data\MS_collapse_by_tenant_merge_$S_DATE"**Correlation tables**pwcorr msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize, sigpwcorr lmsgSentPerUser lmtgHoursPerAttendee lMeanUtilization lMeanAfterHoursWork linternalnetworksize lexternalnetworksize, sigkeep idv_reverse lto pd uai Countryduplicates droppwcorr idv_reverse lto pd uai, sigclearuse "data\MS_collapse_by_tenant_merge_$S_DATE"**Tabulations**tab TenantSize, missingtab IndustryGroup, missingegen group=group(Country)tab group*Summary stats*sum msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksizebysort TenantSize: sum msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksizebysort TenantSize: sum *Upper* *Lower*bysort IndustryG: sum msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksizeclear*Sparklines*use "data\MS_collapse_by_tenant_merge_$S_DATE"g counter=0replace counter=1 if sizedum1==1replace counter=2 if sizedum2==1replace counter=3 if sizedum3==1replace counter=4 if sizedum4==1replace counter=5 if sizedum5==1collapse (mean) msgSentPer mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize, by (counter)label var msgSentPerUser  "Mean Emails Sent"label var mtgHoursPer "Mean Meeting Hours"label var MeanUtil "Mean Utilization Hours"label var MeanAfter "Mean After Hours"label var internal "Mean Internal Network Size"label var external "Mean External Network Size"foreach var in msgSentPer mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize {local mytitle : variable label `var'twoway line `var' counter, xlabel(1 "1-250" 2"250-500" 3 "500-1000" 4 "1000-5000" 5 "5000+") xtitle(" " "Tenant Size (# Employees)") ytitle("`mytitle'")graph save "output\\spark_`var'.gph", replacegraph export "output\\spark_`var'.png", replace}use "data\MS_collapse_by_tenant_merge_$S_DATE"g counter=0replace counter=1 if sizedum1==1replace counter=2 if sizedum2==1replace counter=3 if sizedum3==1replace counter=4 if sizedum4==1replace counter=5 if sizedum5==1collapse (mean) *Upper* , by (counter)label var msgSentUpperQtileVal "Mean Emails Sent, Upper Quintile"label var mtgHoursUpperQtileVal "Mean Meeting Hours, Upper Quintile"foreach var in msgSentUpperQtileVal mtgHoursUpperQtileVal {local mytitle : variable label `var'twoway line `var' counter, xlabel(1 "1-250" 2"250-500" 3 "500-1000" 4 "1000-5000" 5 "5000+") xtitle(" " "Tenant Size (# Employees)") ytitle("`mytitle'")graph save "output\\spark_upper_`var'.gph", replacegraph export "output\\spark_upper_`var'.png", replace}clearuse "data\network_upper_lower"replace tenant="1. 1-250" if tenant=="SMB: 1-250"replace tenant="2. 250-500" if tenant=="SMS&P (Medium/Small): 250-500"replace tenant="3. 500-1000" if tenant=="SMS&P (Medium/Large): 500-1000"replace tenant="4. 1000-5000" if tenant=="Corporate Enterprise (EPG): 1000-5000"replace tenant="5. 5000+" if tenant=="Major Large Enterprise: 5000+"tab tenantsize, gen(sizedum)g counter=0replace counter=1 if sizedum1==1replace counter=2 if sizedum2==1replace counter=3 if sizedum3==1replace counter=4 if sizedum4==1replace counter=5 if sizedum5==1collapse (mean) *upper* , by (counter)								  label var internalnetworkupperquartilevalu "Mean Internal Network Size, Upper Quintile" label var externalnetworkupperquartilevalu "Mean External Network Size, Upper Quintile"foreach var in internalnetworkupperquartilevalu externalnetworkupperquartilevalu {local mytitle : variable label `var'twoway line `var' counter, xlabel(1 "1-250" 2"250-500" 3 "500-1000" 4 "1000-5000" 5 "5000+") xtitle(" " "Tenant Size (# Employees)") ytitle("`mytitle'")graph save "output\\spark_upper_`var'.gph", replacegraph export "output\\spark_upper_`var'.png", replace}clear*DV Figures - all 130*use "data\MS_collapse_by_tenant_merge_$S_DATE"collapse (mean) msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize idv, by (Country)*foreach var in msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize {foreach var in msgSentPerUser {gsort -`var'g order=_n*tab Country if order==1*tab Country if order==130*tab Country if order==25graph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle("Mean Emails Sent") xsize(11)drop ordergraph save "output\\`var'_big", replacegraph export "output\\`var'_big.png", replace}clear*DV Figures - 66*use "data\MS_collapse_by_tenant_merge_$S_DATE"keep if idv~=.collapse (mean) msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize idv, by (Country)label var msgSentPerUser  "Mean Emails Sent"label var mtgHoursPer "Mean Meeting Hours"label var MeanUtil "Mean Utilization Hours"label var MeanAfter "Mean After Hours"label var internal "Mean Internal Network Size"label var external "Mean External Network Size"egen group=group(Country)tab groupforeach var in msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize {gsort -`var'g order=_nlocal mytitle : variable label `var'egen mean=mean(`var')local mean=meangraph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle(`mytitle') xsize(8) nofill yline(`mean')drop ordergraph save "output\\`var'_small", replacegraph export "output\\`var'_small.png", replacekeep if idv~=.drop mean}clear*IDV LTO PDI*use "data\MS_collapse_by_tenant_merge_$S_DATE"keep if idv_reverse~=. | lto~=. | pdi~=. |  idv~=. |  mas~=. |  uai~=. |  ltowvs~=. |  ivr~=. keep Country idv* lto pdi mas uai lto ivrduplicates dropsum idv* lto pdi mas uai ivrkeep idv_reverse lto Country pdiduplicates dropforeach var in idv_reverse lto pdi {gsort -`var'g order=_nlocal mytitle : variable label `var'*graph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle(`mytitle') xsize(8) b1title("Countries") nofillegen mean=mean(`var')local mean=meangraph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle(`mytitle') xsize(8)  nofill yline(`mean')  bar(1,color(blue))drop order meangraph save "output\\`var'", replacegraph export "output\\`var'.png", replace}stop*Create scatter plots of idv and lto*pwcorr idv_reverse lto, sigg corr=r(rho)g count=r(N)g t=corr/sqrt((1-(corr*corr))/(count-2))g new=tprob(count, t)local corr: di %-12.3f  corrlocal sig: di %-12.3f  newscatter lto idv_reverse , msymbol(none) mlabel(Country) ytitle("Hofstede: Longterm Orientation") note("Coeff.=`corr' Pvalue=`sig'") graph export "output//ido_idv.png", replace**Regressions**clear*/use "data\MS_collapse_by_tenant_merge_$S_DATE"*STD regressions*foreach var in lmsgSentPerUser lmtgHoursPerAttendee lMeanUtilization lMeanAfterHoursWork linternalnetworksize lexternalnetworksize pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop {egen std_`var'=std(`var')local mylabel : variable label `var'label var std_`var' "`mylabel', std"d std_`var'}stopregress std_lmsgSentPerUser std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country) outreg2 using "output\ppt1_$S_DATE", excel label replace dec(3)regress std_lmtgHoursPerAttendee std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt1_$S_DATE", excel label append dec(3)regress std_lmsgSentPerUser std_lmtgHoursPerAttendee std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt1_$S_DATE", excel label append dec(3)regress std_lmtgHoursPerAttendee std_lmsgSentPerUser  std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt1_$S_DATE", excel label append dec(3)regress std_lMeanUtilization std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country) outreg2 using "output\ppt2_$S_DATE", excel label replace dec(3)regress std_lMeanAfterHoursWork std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt2_$S_DATE", excel label append dec(3)regress std_linternalnetworksize  std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt2_$S_DATE", excel label append dec(3)regress std_lexternalnetworksize  std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt2_$S_DATE", excel label append dec(3)stop*REG regressionsregress lmsgSentPerUser pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country) outreg2 using "output\ppt1_$S_DATE", excel label replace dec(3)regress lmtgHoursPerAttendee pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt1_$S_DATE", excel label append dec(3)regress lmsgSentPerUser lmtgHoursPerAttendee pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt1_$S_DATE", excel label append dec(3)regress lmtgHoursPerAttendee lmsgSentPerUser  pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt1_$S_DATE", excel label append dec(3)regress lMeanUtilization pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country) outreg2 using "output\ppt2_$S_DATE", excel label replace dec(3)regress lMeanAfterHoursWork pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt2_$S_DATE", excel label append dec(3)regress linternalnetworksize  pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt2_$S_DATE", excel label append dec(3)regress lexternalnetworksize  pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt2_$S_DATE", excel label append dec(3)regress lmsgSentPerUser   inddum2-inddum8 sizedum2-sizedum5, cluster(Country) outreg2 using "output\ppt_base_$S_DATE", excel label replace dec(3)regress lmtgHoursPerAttendee     inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt_base_$S_DATE", excel label append dec(3)regress lMeanUtilization     inddum2-inddum8 sizedum2-sizedum5, cluster(Country) outreg2 using "output\ppt_base_$S_DATE", excel label append dec(3)regress lMeanAfterHoursWork     inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt_base_$S_DATE", excel label append dec(3)regress linternalnetworksize      inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt_base_$S_DATE", excel label append dec(3)regress lexternalnetworksize      inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt_base_$S_DATE", excel label append dec(3)