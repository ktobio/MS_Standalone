capture log closeclearset more offset scheme s1colori think i should do it so each OmsID has countries, etc all to the right, and merge just on OmsIDfigure out the countries in the MS data that doesn't have the meta data/*Questions - there are some companies not in the DandB dataEngland v. UK*/log using "logs\powerpoint_$S_DATE", replace/*use "data\MS_collapse_by_tenant_merge_21 Aug 2017"drop _mergesave "data\MS_collapse_by_tenant_merge_$S_DATE", replaceclear*/use "data\tenant_metadata"drop if Oms==""drop POSTALCD GRWPCT GRWSIGN GRWTYPE CITYduplicates dropbysort Oms COUNTRY: egen maxrevenue=max(REV)/*for now, due max revenue only*/drop REVENUEduplicates drop*bysort Oms COUNTRY LINE: egen minyear=min(YEAR)*drop YEAR/*For now, do ealiest year founded*/bysort Oms: egen earlyyear=min(YEAR)drop YEARduplicates drop*bysort Oms COUNTRY YEAR: g counter=_nbysort Oms COUNTRY : g counter=_n*reshape wide LINE min, i(Oms COUNTRY max YEAR) j(counter)*reshape wide LINE , i(Oms COUNTRY max YEAR) j(counter)reshape wide LINE , i(Oms COUNTRY max earlyyear) j(counter)rename COUNTRY Countryreplace Country=proper(Country)replace Country="Hong Kong SAR" if Country=="Hong Kong"replace Country="Korea" if Country=="Korea Rep Of"replace Country="Russia" if Country=="Russian Federation"replace Country="United States" if Country=="Usa"save "data\tenant_metadata2", replacejoinby Country using "data\tmp", unmatched(both)tab Country if _m==2keep if _m==1save "data\extra", replacestopclearuse "data\tenant_metadata2"joinby Oms Country using "data\MS_collapse_by_tenant_merge_$S_DATE", unmatched(both)tab Country if _m==1tab Country if _m==2tab Country if _m==3drop if _m==1drop _mstopstopdrop GRWPCT GRWSIGN GRWTYPE POSTALCD POSTALCD CITY COUNTRYjoinby Oms using "data\MS_collapse_by_tenant_merge_$S_DATE", unmatched(both)stop/*use "data\network_upper_lower"bysort tenant: sum *upper* *lower*clear*/ /*use "data\MS_collapse_by_tenant_merge_ 4 Aug 2017"drop if Country==""drop if Oms==""replace MeanUtilizatio=. if MeanUtilizatio<0g idv_reverse=100-idvlabel var idv_reverse "Hofstede: Collectivism. Higher = valued more"replace Country="Macedonia" if Country=="Macedonia (Former Yugoslav Republic of Macedonia)"**Note updated data has some numbers that fall outside the 100 topcode: http://geerthofstede.com/research-and-vsm/dimension-data-matrix**save "data\MS_collapse_by_tenant_merge_$S_DATE", replace*Summarize msg sent per user by categories*sum msgSentPerUser if sizedum5==1 & Country=="United States" & IndustryG=="Technology"sum msgSentPerUser if sizedum5==1 & Country=="France" & IndustryG=="Technology"sum msgSentPerUser if sizedum1==1 & Country=="United States" & IndustryG=="Professional Services"sum msgSentPerUser if sizedum5==1 & Country=="United States" & IndustryG=="Professional Services"*Tenant calculations**cutting off the highest ones at 50,000Kg counter=1collapse (sum) counter, by (Country)gsort -counterg order=_nlist Country counter if counter>=50000replace counter=50000 if counter>=50000graph bar counter, over(Country, sort(order) label(nolabels)) ytitle("Number of Tenants") xsize(9)graph save "output\\tenants_cutoffa", replacegraph export "output\\tenants_cutoffa.png", replacegraph bar counter, over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle("Number of Tenants") xsize(12)graph save "output\\tenants_cutoffb", replacegraph export "output\\tenants_cutoffb.png", replacestopdrop orderclearuse "data\MS_collapse_by_tenant_merge_$S_DATE"keep yr2015broadband yr2015gdp_pc yr2016pop Countryduplicates dropreplace yr2016=yr2016/1000000label var yr2016pop "Total Population 2016 in Millions"label var yr2015broad "Fixed broadband subscriptions 2015 per 100 people"foreach var in yr2015broadband yr2015gdp_pc yr2016pop {gsort -`var'g order=_nlocal mytitle : variable label `var'egen mean=mean(`var')local mean=meangraph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle(`mytitle') xsize(11)  nofill yline(`mean')  bar(1,color(orange))drop order meangraph save "output\\`var'", replacegraph export "output\\`var'.png", replace}stopxtile tenant_quint = counter, nq(5)gsort -tenantg order=_nlabel define lblname 1 "1st Quintile" 2 "2nd Quintile" 3 "3rd Quintile" 4 "4th Quintile" 5 "5th Quintile"label values tenant lblname graph bar counter, over(tenant_quint, sort(order) ) ytitle("Mean # of Tenants, by Country Quintile")  b1title("Country Quintile") xsize(8)graph save "output\\tenants", replacegraph export "output\\tenants.png", replaceclearuse "data\MS_collapse_by_tenant_merge_$S_DATE"**Correlation tables**pwcorr msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize, sigpwcorr lmsgSentPerUser lmtgHoursPerAttendee lMeanUtilization lMeanAfterHoursWork linternalnetworksize lexternalnetworksize, sigkeep idv_reverse lto pd uai Countryduplicates droppwcorr idv_reverse lto pd uai, sigclearuse "data\MS_collapse_by_tenant_merge_$S_DATE"**Tabulations**tab TenantSize, missingtab IndustryGroup, missingegen group=group(Country)tab group*Summary stats*sum msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksizebysort TenantSize: sum msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksizebysort TenantSize: sum *Upper* *Lower*bysort IndustryG: sum msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksizeclear*Sparklines*use "data\MS_collapse_by_tenant_merge_$S_DATE"g counter=0replace counter=1 if sizedum1==1replace counter=2 if sizedum2==1replace counter=3 if sizedum3==1replace counter=4 if sizedum4==1replace counter=5 if sizedum5==1collapse (mean) msgSentPer mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize, by (counter)label var msgSentPerUser  "Mean Emails Sent"label var mtgHoursPer "Mean Meeting Hours"label var MeanUtil "Mean Utilization Hours"label var MeanAfter "Mean After Hours"label var internal "Mean Internal Network Size"label var external "Mean External Network Size"foreach var in msgSentPer mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize {local mytitle : variable label `var'twoway line `var' counter, xlabel(1 "1-250" 2"250-500" 3 "500-1000" 4 "1000-5000" 5 "5000+") xtitle(" " "Tenant Size (# Employees)") ytitle("`mytitle'")graph save "output\\spark_`var'.gph", replacegraph export "output\\spark_`var'.png", replace}use "data\MS_collapse_by_tenant_merge_$S_DATE"g counter=0replace counter=1 if sizedum1==1replace counter=2 if sizedum2==1replace counter=3 if sizedum3==1replace counter=4 if sizedum4==1replace counter=5 if sizedum5==1collapse (mean) *Upper* , by (counter)label var msgSentUpperQtileVal "Mean Emails Sent, Upper Quintile"label var mtgHoursUpperQtileVal "Mean Meeting Hours, Upper Quintile"foreach var in msgSentUpperQtileVal mtgHoursUpperQtileVal {local mytitle : variable label `var'twoway line `var' counter, xlabel(1 "1-250" 2"250-500" 3 "500-1000" 4 "1000-5000" 5 "5000+") xtitle(" " "Tenant Size (# Employees)") ytitle("`mytitle'")graph save "output\\spark_upper_`var'.gph", replacegraph export "output\\spark_upper_`var'.png", replace}clearuse "data\network_upper_lower"replace tenant="1. 1-250" if tenant=="SMB: 1-250"replace tenant="2. 250-500" if tenant=="SMS&P (Medium/Small): 250-500"replace tenant="3. 500-1000" if tenant=="SMS&P (Medium/Large): 500-1000"replace tenant="4. 1000-5000" if tenant=="Corporate Enterprise (EPG): 1000-5000"replace tenant="5. 5000+" if tenant=="Major Large Enterprise: 5000+"tab tenantsize, gen(sizedum)g counter=0replace counter=1 if sizedum1==1replace counter=2 if sizedum2==1replace counter=3 if sizedum3==1replace counter=4 if sizedum4==1replace counter=5 if sizedum5==1collapse (mean) *upper* , by (counter)								  label var internalnetworkupperquartilevalu "Mean Internal Network Size, Upper Quintile" label var externalnetworkupperquartilevalu "Mean External Network Size, Upper Quintile"foreach var in internalnetworkupperquartilevalu externalnetworkupperquartilevalu {local mytitle : variable label `var'twoway line `var' counter, xlabel(1 "1-250" 2"250-500" 3 "500-1000" 4 "1000-5000" 5 "5000+") xtitle(" " "Tenant Size (# Employees)") ytitle("`mytitle'")graph save "output\\spark_upper_`var'.gph", replacegraph export "output\\spark_upper_`var'.png", replace}clear*DV Figures - all 130*use "data\MS_collapse_by_tenant_merge_$S_DATE"collapse (mean) msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize idv, by (Country)*foreach var in msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize {foreach var in msgSentPerUser {gsort -`var'g order=_n*tab Country if order==1*tab Country if order==130*tab Country if order==25graph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle("Mean Emails Sent") xsize(11)drop ordergraph save "output\\`var'_big", replacegraph export "output\\`var'_big.png", replace}clear*DV Figures - 66*use "data\MS_collapse_by_tenant_merge_$S_DATE"keep if idv~=.collapse (mean) msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize idv, by (Country)label var msgSentPerUser  "Mean Emails Sent"label var mtgHoursPer "Mean Meeting Hours"label var MeanUtil "Mean Utilization Hours"label var MeanAfter "Mean After Hours"label var internal "Mean Internal Network Size"label var external "Mean External Network Size"egen group=group(Country)tab groupforeach var in msgSentPerUser mtgHoursPerAttendee MeanUtilization MeanAfterHoursWork internalnetworksize externalnetworksize {gsort -`var'g order=_nlocal mytitle : variable label `var'egen mean=mean(`var')local mean=meangraph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle(`mytitle') xsize(8) nofill yline(`mean')drop ordergraph save "output\\`var'_small", replacegraph export "output\\`var'_small.png", replacekeep if idv~=.drop mean}clear*IDV LTO PDI*use "data\MS_collapse_by_tenant_merge_$S_DATE"keep if idv_reverse~=. | lto~=. | pdi~=. |  idv~=. |  mas~=. |  uai~=. |  ltowvs~=. |  ivr~=. keep Country idv* lto pdi mas uai lto ivrduplicates dropsum idv* lto pdi mas uai ivrkeep idv_reverse lto Country pdiduplicates dropforeach var in idv_reverse lto pdi {gsort -`var'g order=_nlocal mytitle : variable label `var'*graph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle(`mytitle') xsize(8) b1title("Countries") nofillegen mean=mean(`var')local mean=meangraph bar  `var', over(Country, sort(order) label(angle(45) labsize(vsmall))) ytitle(`mytitle') xsize(8)  nofill yline(`mean')  bar(1,color(blue))drop order meangraph save "output\\`var'", replacegraph export "output\\`var'.png", replace}stop*Create scatter plots of idv and lto*pwcorr idv_reverse lto, sigg corr=r(rho)g count=r(N)g t=corr/sqrt((1-(corr*corr))/(count-2))g new=tprob(count, t)local corr: di %-12.3f  corrlocal sig: di %-12.3f  newscatter lto idv_reverse , msymbol(none) mlabel(Country) ytitle("Hofstede: Longterm Orientation") note("Coeff.=`corr' Pvalue=`sig'") graph export "output//ido_idv.png", replace**Regressions**clear*/use "data\MS_collapse_by_tenant_merge_$S_DATE"*STD regressions*foreach var in lmsgSentPerUser lmtgHoursPerAttendee lMeanUtilization lMeanAfterHoursWork linternalnetworksize lexternalnetworksize pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop {egen std_`var'=std(`var')local mylabel : variable label `var'label var std_`var' "`mylabel', std"d std_`var'}stopregress std_lmsgSentPerUser std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country) outreg2 using "output\ppt1_$S_DATE", excel label replace dec(3)regress std_lmtgHoursPerAttendee std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt1_$S_DATE", excel label append dec(3)regress std_lmsgSentPerUser std_lmtgHoursPerAttendee std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt1_$S_DATE", excel label append dec(3)regress std_lmtgHoursPerAttendee std_lmsgSentPerUser  std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt1_$S_DATE", excel label append dec(3)regress std_lMeanUtilization std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country) outreg2 using "output\ppt2_$S_DATE", excel label replace dec(3)regress std_lMeanAfterHoursWork std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt2_$S_DATE", excel label append dec(3)regress std_linternalnetworksize  std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt2_$S_DATE", excel label append dec(3)regress std_lexternalnetworksize  std_pdi std_idv_reverse std_ltowvs std_uai std_lyr2015gdp_pc std_lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt2_$S_DATE", excel label append dec(3)stop*REG regressionsregress lmsgSentPerUser pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country) outreg2 using "output\ppt1_$S_DATE", excel label replace dec(3)regress lmtgHoursPerAttendee pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt1_$S_DATE", excel label append dec(3)regress lmsgSentPerUser lmtgHoursPerAttendee pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt1_$S_DATE", excel label append dec(3)regress lmtgHoursPerAttendee lmsgSentPerUser  pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt1_$S_DATE", excel label append dec(3)regress lMeanUtilization pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country) outreg2 using "output\ppt2_$S_DATE", excel label replace dec(3)regress lMeanAfterHoursWork pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt2_$S_DATE", excel label append dec(3)regress linternalnetworksize  pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt2_$S_DATE", excel label append dec(3)regress lexternalnetworksize  pdi idv_reverse ltowvs uai lyr2015gdp_pc lyr2016pop inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt2_$S_DATE", excel label append dec(3)regress lmsgSentPerUser   inddum2-inddum8 sizedum2-sizedum5, cluster(Country) outreg2 using "output\ppt_base_$S_DATE", excel label replace dec(3)regress lmtgHoursPerAttendee     inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt_base_$S_DATE", excel label append dec(3)regress lMeanUtilization     inddum2-inddum8 sizedum2-sizedum5, cluster(Country) outreg2 using "output\ppt_base_$S_DATE", excel label append dec(3)regress lMeanAfterHoursWork     inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt_base_$S_DATE", excel label append dec(3)regress linternalnetworksize      inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt_base_$S_DATE", excel label append dec(3)regress lexternalnetworksize      inddum2-inddum8 sizedum2-sizedum5, cluster(Country)outreg2 using "output\ppt_base_$S_DATE", excel label append dec(3)